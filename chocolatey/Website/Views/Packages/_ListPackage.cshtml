@model ListPackageItemViewModel
@{
    var isSubmitted = Model.Status == PackageStatusType.Submitted;

    var submittedStatus = Model.SubmittedStatus;
    var packageImage = Url.ImageUrl(Model.Id, Model.Version, Model.IconUrl);

    var ballImageUrl = "~/content/images/grey_ball_48.png";
    switch (Model.PackageTestResultsStatus)
    {
        case PackageAutomatedReviewResultStatusType.Pending:
            ballImageUrl = "~/content/images/yellow_ball_48.png";
            break;
        case PackageAutomatedReviewResultStatusType.Failing:
            ballImageUrl = "~/content/images/red_ball_48.png";
            break;
        case PackageAutomatedReviewResultStatusType.Passing:
            ballImageUrl = "~/content/images/green_ball_48.png";
            break;
    }

}
<div class="col-lg-6 col-xl-4 mb-4">
    <div class="package h-100 shadow @if (Model.Status == PackageStatusType.Unknown) {<text> unknown-status</text>} @if (Model.Status == PackageStatusType.Submitted) {<text>@submittedStatus.ToString().ToLower()</text>}">
        @if (Model.Status == PackageStatusType.Unknown)
        {
            <div class="moderator-side text-white d-flex align-items-center">
                <span>Unknown Status</span>
            </div>
        }
        @if (isSubmitted)
        {
            <div class="moderator-side text-white d-flex align-items-center">
                @switch (submittedStatus)
                {
                    case PackageSubmittedStatusType.Pending:
                        <span>Pending Automated Review</span>
                        break;
                    case PackageSubmittedStatusType.Ready:
                        <span>Ready</span>
                        break;
                    case PackageSubmittedStatusType.Updated:
                        <span>Updated</span>
                        @ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 32)
                        break;
                    case PackageSubmittedStatusType.Responded:
                        <span>Responded</span>
                        if (!string.IsNullOrWhiteSpace(Model.ReviewerEmailAddress))
                        {
                            @ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 32)
                        }

                        break;
                    default:
                        <span>Waiting for Maintainer</span>
                        @ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 32)
                        break;
                }
            </div>
        }
        <div class="box bg-white p-3 h-100 d-flex justify-content-start flex-row flex-wrap">
            <div class="row overflow-hidden">
                <div class="col-3 text-center pr-0">
                    <a href="@Url.Package(Model)" title="View more about @Model.Title">
                        <img src="@(Url.Content(packageImage ?? @Links.Content.Images.packageDefaultIcon_50x50_png))" alt="@Model.Id icon" onerror="this.src='@Links.Content.Images.packageDefaultIcon_50x50_png';" />
                    </a>
                </div>
                <div class="col-9">
                    <a href="@Url.Package(Model.Id, Model.UseVersion ? Model.Version : null)" title="View more about @Model.Title">
                        <h3>@Model.Title</h3>
                        <p class="m-0"><img class="package-testing d-inline mr-1" src="@Url.Content(ballImageUrl)" title="Package testing. See package page for more details." alt="Package testing. See package page for more details." /><strong>@Model.Version</strong></p>
                    </a>
                </div>
                <div class="col-12 mt-2">
                    @if (Model.IsOwner(User))
                    {
                        <span class="badge badge-dark p-2">My Package</span>
                    }
                    <ul class="list-unstyled list-inline mb-0">
                        <li class="list-inline-item mr-0">By: </li>
                        @foreach (var owner in Model.Owners)
                        {
                            <li class="list-inline-item"><a href="@Url.Action(MVC.Users.Profiles(owner.Username))" title="@owner.Username">@owner.Username</a></li>
                        }
                    </ul>
                    @if (@Model.Tags.AnySafe())
                    {
                        <ul class="list-unstyled list-inline mb-0">
                            <li class="list-inline-item mr-0">Tags: </li>
                            @foreach (var tag in Model.Tags)
                            {
                                <li class="list-inline-item"><a href="@Url.Search("tag:" + tag)" title="Search for @tag">@tag</a></li>
                            }
                        </ul>
                    }
                    @if (isSubmitted)
                    {
                        <span>Published: @Model.PublishedDate.ToShortDateString()</span>
                        if (Model.ReviewedDate.HasValue)
                        {
                            <span>| Reviewed: @Model.ReviewedDate.GetValueOrDefault().ToShortDateString()</span>
                        }
                        if (!string.IsNullOrWhiteSpace(Model.ReviewerUserName))
                        {
                            <p class="mb-0">Reviewer: @Model.ReviewerUserName</p>
                        }
                        <p class="mb-0">Downloads: @Model.TotalDownloadCount.ToString("n0")</p>
                    }
                    else
                    {
                        <p class="mb-0">Downloads: @Model.TotalDownloadCount.ToString("n0")</p>
                        if (String.IsNullOrEmpty(Model.Description) || Model.Description.Length < 250)
                        {
                            <p class="mt-3">@Model.Description</p>
                        }
                        else
                        {
                            <p class="mt-3">@Model.Description.Substring(0, 250)<text>... </text><a href="@Url.Package(Model)">More information</a></p>

                        }
                    }
                </div>
                <div class="col-12 d-flex flex-column flex-nowrap justify-content-start mt-auto">
                    <span class="copyBox overflow-hidden w-100 rounded">
                        > choco install @Model.Id.ToLower()
                        @if ((!Model.LatestVersion && !Model.LatestStableVersion) || !Model.Listed)
                        {<text> --version @Model.Version</text>}
                        @if (Model.Prerelease)
                        {<text> --pre </text>}
                        <button class="tt" data-toggle="tooltip" title="Copy to Clipboard" data-clipboard-text="choco install @Model.Id.ToLower()
                        @if ((!Model.LatestVersion && !Model.LatestStableVersion) || !Model.Listed)
                        {<text> --version @Model.Version</text>}
                        @if (Model.Prerelease)
                        {<text> --pre </text>}">
                            <i class="icon-clipboard" alt="Copy to Clipboard"></i>
                        </button>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>