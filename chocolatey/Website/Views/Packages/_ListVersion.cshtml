@model ListPackageVersionViewModel
           
@{
    var displayed = Model.DisplayVersion;
    var style = displayed ? "table-row" : "none";
    var htmlClass = displayed ? "" : "versionTableRowMore";
}

@if (Model.Package.Listed || Model.Package.IsOwner(User) || Model.Package.Status == PackageStatusType.Submitted)
{

<tr class="versionTableRow @htmlClass @if (Model.Package.LatestStableVersion)
                                      {
                               <text>recommended </text>
                                      }" style="display: @style">
    <td class="version" @if (Model.Package.LatestStableVersion)
                        {
                            <text>title="Latest Version"</text>
                        }>
        @if (!Model.Package.IsCurrent(Model.CurrentPackageVersion))
        {
            <a href="@Url.Package(Model.Package)">@Model.Package.Title @Model.Package.Version</a>
        }
        else
        {
            <span>@Model.Package.Title @Model.Package.Version</span>
        }
    </td>
    <td>@Model.Package.DownloadCount
    </td>
    <td>@Model.Package.PublishedDate.ToString("D")
    </td>
    @if (Model.Package.IsOwner(User))
    {
        <td>
            <a href="@Url.DeletePackage(Model.Package)" class="delete">@(Model.Package.Listed ? "yes" : "no")</a>
        </td>
    }
    
    @switch (Model.Package.Status)
    {
        case PackageStatusType.Submitted:
                switch (Model.Package.SubmittedStatus)
                {
                    case PackageSubmittedStatusType.Waiting:
                    <td>waiting for maintainer</td>
                    break;
                    case PackageSubmittedStatusType.Responded:
                    <td>responded</td>
                    break;
                    default:
                    <td>submitted</td>
                    break;
                }

                break;
        case PackageStatusType.Approved:
        case PackageStatusType.Rejected:
        case PackageStatusType.Exempted:
            <td>@Model.Package.Status.GetDescriptionOrValue().ToLower()</td>
            break;
        default:
            <td>&nbsp;</td>
            break;
    }
    
    @if (Model.ModerationRole)
    {
        var divVersionId = "divVersion-" + Model.Package.Version.Replace(".", "-");
        <td>
            @if (!string.IsNullOrWhiteSpace(Model.Package.ReviewComments))
            {
                <button type="button" data-toggle="collapse" data-target="#@divVersionId" aria-expanded="false" aria-controls="@divVersionId" class="btn btn-sm btn-secondary mr-2 ">Show</button>
                <div id="@divVersionId" class="collapse mt-3">
                    @Html.Raw(Model.MarkdownGenerator.Transform(Model.Package.ReviewComments.clean_html()))
                </div>
                
            }
        </td>
    }
</tr>
}