@model ReportAbuseViewModel
@{
  ViewBag.Tab = "Packages";
  Bundles.Reference("Scripts/validation");
}
@section TopScripts {
    <script>
        function onSubmit(token) {
            document.getElementById("i-recaptcha").submit();
        }
    </script>
    <script src='https://www.google.com/recaptcha/api.js' async defer></script>
}
<h1 class="page-heading">Report Abuse for <a href="@Url.Package(Model.PackageId,  null)">@Model.PackageId</a></h1>

<p class="message">
    Important: This form is for reporting <em>abusive</em> packages such as
    packages containing <em>malicious code</em> or spam. If "@Model.PackageId" simply doesn't
    appear to work or work correctly, please
    <a href="@Url.Action(MVC.Packages.ContactOwners(Model.PackageId))" title="contact the maintainers">contact the maintainers of "@Model.PackageId".</a>
    <br /><br />
    Note: If you need to contact the <em>site administrators for any other reason</em> (including package triage / become a co-maintainer) for this package, please <a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.PackageId, version = Model.PackageVersion })" title="Contact Site Admins">contact the admins.</a>
</p>

<p class="message error">
  Are you a software vendor? Please read this first - <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "package-triage-process" })#are-you-a-software-vendor">Have my distribution rights been violated?</a>
   <br />If you are here to request/ask about helping with package maintenance, please <a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.PackageId, version = Model.PackageVersion })" title="Contact Site Admins">contact the admins.</a>
</p>

<p class="message warning">
    Do not share sensitive information with this form. <br />
</p>

<p>Please provide a detailed abuse report. Include exactly what the package did.</p>

@using (Html.BeginForm())
{
    <fieldset class="form">
        <legend>Report Abuse</legend>
        @Html.AntiForgeryToken()
        <div class="form-field">
        @Html.ValidationMessageFor(m => m.SpamValidationResponse)
        @if (!Model.ConfirmedUser) {
            @Html.LabelFor(m => m.Email)
            @Html.EditorFor(m => m.Email)
            <span class="field-hint-message">Provide your email address so we can follow up with you.</span>
            @Html.ValidationMessageFor(m => m.Email)
        }
        else {
            <input type="hidden" name="Email" value="test@example.com" />
        }
        </div>
        <div class="form-field">
            @Html.LabelFor(m => m.Message)
            @Html.TextAreaFor(m => m.Message, 10, 50, null)
            @Html.ValidationMessageFor(m => m.Message)
        </div>
        <div class="form-field">
            @Html.CheckBoxFor(m => m.CopySender)<label for="@Model.CopySender" class="for-checkbox">Send me a copy</label>
        </div>
        <div class="form-field required-box">
            @Html.CheckBoxFor(m => m.CheckBox)
            <label for="@Model.CheckBox" class="for-checkbox no-margin-bottom">I understand that the community repository already runs packages and binaries through VirusTotal and I have reviewed that on the package page itself prior to reporting possible malware.</label>
            @Html.ValidationMessageFor(m => m.CheckBox)
        </div>
        <input class="g-recaptcha" data-sitekey="@System.Configuration.ConfigurationManager.AppSettings["reCAPTCHA::PublicKey"]" data-callback="onSubmit" data-badge="bottomleft" type="submit" value="Report" title="Report '@Model.PackageId' for abuse" />
    </fieldset>
}
@section BottomScripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $('fieldset').parent().attr('id', 'i-recaptcha');
        });
    </script>
}