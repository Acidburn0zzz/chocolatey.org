@using MarkdownSharp
@model DisplayPackageViewModel
@{
    ViewBag.Title = Model.Title + " " + Model.Version;
    ViewBag.Tab = "Packages";
    Layout = "~/Views/Shared/TwoColumnLayout.cshtml";
    var markdownGenerator = new Markdown(new MarkdownOptions
        {
            AutoHyperlink = true,
            AutoNewLines = true,
            EncodeProblemUrlCharacters = true,
            LinkEmails = true,
        });
}
@section SideColumn {
    <img class="logo" src="@(Model.IconUrl ?? @Links.Content.Images.packageDefaultIcon_png)" alt="Icon for package @Model.Id" onerror="this.src='@Links.Content.Images.packageDefaultIcon_png';" />
    <div id="stats">
        <div class="stat">
            <p class="stat-number">@Model.TotalDownloadCount.ToString("n0")</p>
            <p class="stat-label">Downloads</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.DownloadCount.ToString("n0")</p>
            <p class="stat-label">Downloads of v @Model.Version</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.LastUpdated.ToShortDateString()</p>
            <p class="stat-label">Last update</p>
        </div>
    </div>
    <nav>
        <ul class="links">
            @if (!String.IsNullOrEmpty(Model.ProjectUrl))
            {
                <li><a href="@Model.ProjectUrl" title="Visit the project site to learn more about this package">
                Project Site</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.LicenseUrl))
            {
                <li><a href="@Model.LicenseUrl" title="Make sure you agree with the license">License</a></li>
            }
            <li><a href="@Url.Action(MVC.Packages.ContactOwners(Model.Id))">Contact Maintainers</a></li>
            <li><a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.Id, version = Model.Version })" title="Contact Site Admins">
            Contact Site Admins</a></li>
            <li><a href="@Url.Action(MVC.Packages.ReportAbuse(Model.Id, Model.Version))" title="Report Abuse">
            Report Abuse</a></li>
            @*@if (User.Identity.IsAuthenticated)
            {*@
            <li><a href="@Url.PackageDownload(2, Model.Id, Model.Version)" title="Download the raw nupkg file.">
            Download</a></li>
            @*} else {
                <li><a href="@Url.Action(@MVC.Packages.Download())" title="How do I download?">How to Download</a></li>
            }*@
            @if (Model.IsOwner(User))
            {
                <li><a href="@Url.EditPackage(Model)">Edit Package</a></li>
                <li><a href="@Url.ManagePackageOwners(Model)">Manage Maintainers</a></li>
                <li><a href="@Url.DeletePackage(Model)" class="delete">Delete Package</a></li>
            }
        </ul>
    </nav>
}
<div class="package-page">
    @if (Model.Prerelease)
    {
        <p class="prerelease-message">This is a prerelease version of @Model.Title. </p>
    }
    else if (!Model.IsLatestVersionAvailable)
    {
        <p class="not-latest-message">This is not the <a href="@Url.Package(Model.Id)" title="View the latest version">
        latest version</a> of @Model.Title available. </p>
    }
    @if (Model.IsInstallOrPortable)
    {
        <p class="app-or-tool-message">This is an installer (*.install) or a portable (*.portable)
            application package. Learn more about chocolatey's distinction of <a href="https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#what-distinction-does-chocolatey-make-between-an-installable-and-a-portable-application">
            installed versus portable apps</a> and/or learn about <a href="https://github.com/chocolatey/chocolatey/wiki/ChocolateyFAQs#what-is-the-difference-between-packages-named-install-ie-gitinstall-portable-ie-gitportable-and--ie-git">
            this kind of package</a>. Note that the suffix *.app is a synonym for *.install.
            Similarly, *.commandline and *.tool mean the same as *.portable. But these suffixes
            are deprecated in favor of *.install and *.portable, because the latter are more
            logical and understandable. </p>
    }
    <div class="hgroup page-heading">
        <h1>@Model.Title</h1>
        <h2>@Model.Version</h2>
    </div>
    

    @if (Model.IsOwner(User) && Model.Status == PackageStatusType.Rejected)
    {
        <p class="message error">This package was rejected on @Model.ReviewedDate.GetValueOrDefault().ToShortDateString(). The reviewer @Model.ReviewedByUserName has listed the following reason(s): 
            <br />
            @Model.ReviewComments
        </p>
    }
    else if (Model.IsOwner(User) && !Model.Listed && Model.Status != PackageStatusType.Approved)
    {
        <p class="message error">This package will remain unlisted until it has been approved by a moderator.
            You can see the package because you are one of its maintainers.  If you have not heard from 
            the moderators within one business day, please <a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.Id, version = Model.Version })" title="Contact Site Admins">contact Site Admins</a>.</p>

        if (User.IsInRole(Constants.AdminRoleName))
        {
            <ul class="message review-instructions">Instructions for review:
                <li>Leave comments here and/or in email.</li>
                <li>Please do not reject a package until the end of the conversation</li>
            </ul> 

        }
        else if (!string.IsNullOrWhiteSpace(Model.ReviewComments))
        {
            <p class="message">@Model.ReviewComments</p>
        }
    }
    else if (Model.IsOwner(User) && !Model.Listed)
    {
        <p class="message warning">This package is unlisted and hidden from package listings.
            You can see the package because you are one of its maintainers. To list the package
            again, <a href="@Url.DeletePackage(Model)">change its listing setting</a>. </p>
    }
    
    @if (Model.Status == PackageStatusType.Approved)
    {
        <p class="message warning">This package was approved by moderator @Model.ReviewedByUserName on @Model.ApprovedDate.GetValueOrDefault().ToShortDateString().</p>
    }
    
    @if (Model.Listed && Model.Status != PackageStatusType.Approved)
    {
        <p class="message error">This package was submitted prior to moderation and had not been approved. Use at your own risk.</p>
    }


    @Html.Raw(markdownGenerator.Transform(Model.Description))
    @*foreach (var line in Model.Description.ToStringSafe().Split('\n'))
    {
        <p>@line</p>
    }*@

    <p>To install @Model.Title, run the following command from the command line or from
        PowerShell: </p>
    <div class="nuget-badge">
        <p><code><span>C:\&gt; </span>choco install @Model.Id
               @if (!Model.LatestVersion || !Model.Listed)
               { <text> -Version @Model.Version</text> }
               @if (Model.Prerelease)
               {<text> -Pre </text>}</code></p>
    </div>
      @if (Model.Files.Any())
    {
       <a name="files" id="files"></a><h3>Files</h3>
        <ul>
            @foreach (var file in Model.Files)
            {
                <li>@file.FilePath
                    @if (!string.IsNullOrWhiteSpace(file.FileContent))
                    {
                        var fileDivId = "div-" + Path.GetFileName(file.FilePath).Replace(".", "-");
                        <a onclick="if ($(this).text() == 'Hide') {$('#@fileDivId').hide();$(this).text('Show');} else {$('#@fileDivId').show();$(this).text('Hide');}">
                        Show</a>
                        <br />
                        <div id="@fileDivId" class="package-file-content">
                            @{ var shBrush = "";
                            }
                            @switch (Path.GetExtension(file.FilePath))
                            {
                                case ".ps1":
                                case ".psm1":
                                    shBrush = "ps";
                                    break;
                                case ".xml":
                                case ".config":
                                    shBrush = "xml";
                                    break;
                                case ".js":
                                case ".json":
                                    shBrush = "js";
                                    break;
                                default:
                                    shBrush = "plain";
                                    break;
                            }
                            <pre class="brush: @shBrush">@file.FileContent</pre>
                        </div>
                    }
                </li>
            }
        </ul>
    }
    @if (!String.IsNullOrWhiteSpace(Model.ReleaseNotes))
    {
        <a name="releasenotes" id="releasenotes"></a><h3>Release Notes</h3>
        @Html.Raw(markdownGenerator.Transform(Model.ReleaseNotes))
@* foreach (var note in Model.ReleaseNotes.Split('\n'))
        {
            <p>@note</p>
        }*@
    }
    <a name="maintainers" id="maintainers"></a><h3>Maintainers</h3>
    @ViewHelpers.OwnersGravatar(Model.Owners, 32, Url)
    <a name="authors" id="authors"></a><h3>Authors</h3>
    <ul class="authors">
        @foreach (var author in Model.Authors)
        {
            <li><a href="@Url.Search(author.Name)" title="Search for @author.Name">@author.Name</a></li>
        }
    </ul>
    @if (!String.IsNullOrEmpty(Model.Copyright))
    {
        <h3>Copyright</h3>
        <p>@Model.Copyright</p>
    }
    @if (@Model.Tags.AnySafe())
    {
        <a name="tags" id="tags"></a><h3>Tags</h3>
        <ul class="tags">
            @foreach (var tag in Model.Tags)
            {
                <li><a href="@Url.Search(tag)" title="Search for @tag">@tag</a></li>
            }
        </ul>
    }
    @Html.Partial("_PackageDependencies", Model.Dependencies)
    <a name="versionhistory" id="versionhistory"></a><h3>Version History</h3>
    <table class="sexy-table">
        <thead>
            <tr>
                <th class="first">
                    Version
                </th>
                <th>
                    Downloads
                </th>
                <th class="@(Model.IsOwner(User) ? "" : "last")">
                    Last updated
                </th>
                @if (Model.IsOwner(User))
                {
                    <th class="last">
                        Listed
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var packageVersion in Model.PackageVersions)
            {
                if (packageVersion.Listed || Model.IsOwner(User))
                {
                <tr class="versionTableRow @if (packageVersion.LatestVersion)
                                           {<text>recommended </text>}">
                    <td class="version" @if (packageVersion.LatestVersion)
                                        {<text>title="Latest Version"</text>}>
                        @if (!packageVersion.IsCurrent(Model))
                        {
                            <a href="@Url.Package(packageVersion)">@packageVersion.Title @packageVersion.Version</a>
                        }
                        else
                        {
                            <span>@packageVersion.Title @packageVersion.Version</span>
                        }
                    </td>
                    <td>@packageVersion.DownloadCount
                    </td>
                    <td>@packageVersion.LastUpdated.ToString("D")
                    </td>
                    @if (Model.IsOwner(User))
                    {
                        <td>
                            <a href="@Url.DeletePackage(packageVersion)" class="delete">@(packageVersion.Listed ? "yes" : "no")</a>
                        </td>
                    }
                </tr>
                }
            }
        </tbody>
    </table>
  
</div>
<div class="package-page">
    <a name="discussion" id="discussion"></a><h3>Discussion for the @Model.Title Package</h3>
    <p>Ground rules:
        <br />
        <ul>
            <li>This discussion is only about @Model.Title and the @Model.Title package. If you
                have feedback for chocolatey, please contact the <a href="http://groups.google.com/group/chocolatey">
                google group</a>.</li>
            <li>This discussion will carry over multiple versions. If you have a comment about a
                particular version, please note that in your comments.</li>
            <li>This is not a substitute for contacting package maintainers. Please use the link
                on the left side of this page or follow this link to <a href="@Url.Action(MVC.Packages.ContactOwners(Model.Id))">
                contact maintainers</a>.</li>
            <li>Tell us what you love about the package or @Model.Title, or tell us what needs improvement.</li>
            <li>Share your experiences with the package, or extra configuration or got yas that
                you've found.</li>
        </ul>
    </p>
    @{
        var disqusUrl = "http://" + Request.Url.Host + @Url.Package(Model.Id);
    }
    <div id="disqus_thread">
    </div>

    <script type="text/javascript">
        var disqus_shortname = 'chocolatey';

        var disqus_url = '@disqusUrl';
        var commentItem;
        function disqus_config() {
            this.callbacks.onNewComment = [function (comment) {
                //comment.id comment.text
                //commentItem = comment;
                //console.log('New comment: ' + comment.text);
            } ];
        }

        (function () {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>

    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shCore.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushPlain.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushPowerShell.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushJScript.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushXml.js")"></script>
    <link type="text/css" rel="stylesheet" href="@Url.Content("~/Content/SyntaxHighlighter/shCore.css")" />
    <link type="text/css" rel="stylesheet" href="@Url.Content("~/Content/SyntaxHighlighter/shThemeDefault.css")" />

    <script type="text/javascript">
        SyntaxHighlighter.defaults['gutter'] = true;
        SyntaxHighlighter.defaults['tab-size'] = 2;
        SyntaxHighlighter.defaults['toolbar'] = false;
        SyntaxHighlighter.defaults['wrap-lines'] = false;
        SyntaxHighlighter.defaults['pad-line-numbers'] = false;
        SyntaxHighlighter.defaults['auto-links'] = true;
        SyntaxHighlighter.defaults['collapse'] = false;
        SyntaxHighlighter.all();
    </script>

    <noscript>
        Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments
        powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">
    Disqus</span></a>
</div>
