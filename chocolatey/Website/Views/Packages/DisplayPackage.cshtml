@using MarkdownSharp
@using NuGetGallery
@model DisplayPackageViewModel
@{
    ViewBag.Title = Model.Title + " " + Model.Version;
    ViewBag.Tab = "Packages";
    Layout = "~/Views/Shared/TwoColumnLayout.cshtml";
    var markdownGenerator = new Markdown {
        AutoHyperlink = true,
        AutoNewLines = true,
        //EncodeProblemUrlCharacters = true,
        LinkEmails = true,
        SkipCodeBlocks = true,
    };

    var statuses = Model.Status.GetEnumerationItems().ToList();

    var moderator = User != null && User.IsModerator();
    var moderationRole = User != null && User.IsInAnyModerationRole();
    var maintainer = User != null && Model.Owners.Any(u => u.Username == User.Identity.Name);
    var reviewerComments = !string.IsNullOrWhiteSpace(Model.ReviewerUserName) ? "by moderator " + Model.ReviewerUserName : "as a trusted package";    
}
@section SideColumn {
    <img class="logo" src="@(Model.IconUrl ?? @Links.Content.Images.packageDefaultIcon_png)" alt="Icon for package @Model.Id" onerror="this.src='@Links.Content.Images.packageDefaultIcon_png';" />
    <div id="stats">
        <div class="stat">
            <p class="stat-number">@Model.TotalDownloadCount.ToString("n0")</p>
            <p class="stat-label">Downloads</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.DownloadCount.ToString("n0")</p>
            <p class="stat-label">Downloads of v @Model.Version</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.LastUpdated.ToShortDateString()</p>
            <p class="stat-label">Last update</p>
        </div> 
        @if (Model.Status == PackageStatusType.Submitted)
        {
            <div class="stat">
                <p class="stat-number">@Model.PublishedDate.ToShortDateString()</p>
                <p class="stat-label">Published Date</p>
            </div>

            if (Model.ReviewedDate.HasValue)
            {
                <div class="stat">
                    <p class="stat-number">@Model.ReviewedDate.GetValueOrDefault().ToShortDateString()</p>
                    <p class="stat-label">Reviewed Date</p>
                </div>

                <div class="stat">
                    <p class="stat-number">@ViewHelpers.GravatarImage(Model.ReviewerEmailAddress, Model.ReviewerUserName, 64)</p>
                    <p class="stat-label">Reviewer</p>
                </div>
            }
        }
    </div>
    <nav>
        <ul class="links">
            @if (!String.IsNullOrEmpty(Model.ProjectUrl))
            {
                <li><a href="@Model.ProjectUrl" title="Visit the software site to learn more about the software this package installs">
                Software Site</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.ProjectSourceUrl))
            {
                <li><a href="@Model.ProjectSourceUrl" title="See the software source">
                Software Source</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.LicenseUrl))
            {
                <li><a href="@Model.LicenseUrl" title="Make sure you agree with the software license">Software License</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.DocsUrl))
            {
                <li><a href="@Model.DocsUrl" title="See the project's documentation">
                Software Docs</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.MailingListUrl))
            {
                <li><a href="@Model.MailingListUrl" title="See the project's mailing list">
                Software Mailing List</a></li>
            }
            @if (!String.IsNullOrEmpty(Model.BugTrackerUrl))
            {
                <li><a href="@Model.BugTrackerUrl" title="See the project's issue link">
                Software Issues</a></li>
            }
            <li>&nbsp;</li>
            <li><span>Package Specific</span></li>
            @if (!String.IsNullOrEmpty(Model.PackageSourceUrl))
            {
                <li><a href="@Model.PackageSourceUrl" title="See the package source">
                Package Source</a></li>
            }
            <li><a href="@Url.Action(MVC.Packages.ContactOwners(Model.Id))">Contact Maintainers</a></li>
            <li><a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.Id, version = Model.Version })" title="Contact Site Moderators">
            Contact Site Admins</a></li>
            <li><a href="@Url.Action(MVC.Packages.ReportAbuse(Model.Id, Model.Version))" title="Report Abuse">
            Report Abuse</a></li>

            <li><a href="@Url.PackageDownload(2, Model.Id, Model.Version)" title="Download the raw nupkg file.">
            Download</a></li>
            @if (maintainer || moderator)
            {
                <li><a href="@Url.EditPackage(Model)">Edit Package</a></li>
                <li><a href="@Url.ManagePackageOwners(Model)">Manage Maintainers</a></li>
                <li><a href="@Url.DeletePackage(Model)" class="delete">Delete Package</a></li>
            }
        </ul>
    </nav>
}
<div class="package-page">
    @if (Model.Prerelease)
    {
        <p class="prerelease-message">This is a prerelease version of @Model.Title. </p>
    }
    else if (!Model.IsLatestVersionAvailable && Model.Status != PackageStatusType.Submitted && Model.Status != PackageStatusType.Rejected)
    {
        <p class="not-latest-message">This is not the <a href="@Url.Package(Model.Id)" title="View the latest version">
        latest version</a> of @Model.Title available. </p>
    }
    
    @if (Model.IsInstallOrPortable)
    {
        <p class="app-or-tool-message">This is an installer (*.install) or a portable (*.portable)
            application package. Learn more about chocolatey's distinction of <a href="https://github.com/chocolatey/choco/wiki/ChocolateyFAQs#what-distinction-does-chocolatey-make-between-an-installable-and-a-portable-application">
            installed versus portable apps</a> and/or learn about <a href="https://github.com/chocolatey/choco/wiki/ChocolateyFAQs#what-is-the-difference-between-packages-named-install-ie-gitinstall-portable-ie-gitportable-and--ie-git">
            this kind of package</a>. Note that the suffix *.app is a synonym for *.install.
            Similarly, *.commandline and *.tool mean the same as *.portable. But these suffixes
            are deprecated in favor of *.install and *.portable, because the latter are more
            logical and understandable. </p>
    }
    

    <div class="hgroup page-heading">
        <h1>@Model.Title</h1>
        <h2>@Model.Version</h2>
    </div>
    
    @if (Model.Status == PackageStatusType.Submitted && !Model.IsOwner(User) && !moderationRole)
    {
        <div class="message error">This version is in moderation and has not yet been approved. Be aware that this package version and its contents can 
            change until it is approved. If you install it and it later has changes to this version, you will be out of sync with any changes
            that have been made to the package. There are also no guarantees that it will be approved.</div><br />
    }
    @if ((!Model.IsLatestVersionAvailable || moderationRole) && Model.Status != PackageStatusType.Submitted && Model.PackageVersions.Any(pv => pv.Status == PackageStatusType.Submitted))
    {
        <div class="message warning">There are versions of this package awaiting moderation.</div> <br />
    }

    @if (Model.IsOwner(User) && Model.Status == PackageStatusType.Rejected)
    {
        <div class="message error">This package was rejected on @Model.ReviewedDate.GetValueOrDefault().ToShortDateString(). The reviewer @Model.ReviewerUserName has listed the following reason(s): 
            <br />
            @Html.Raw(markdownGenerator.Transform(Model.ReviewComments))
        </div> <br />
    }
    else if (maintainer && !Model.Listed && Model.Status != PackageStatusType.Approved && Model.Status != PackageStatusType.Exempted)
    {
        <p class="message error">This package will remain unlisted until it has been approved by a moderator.
            You can see the package because you are one of its maintainers. You should have received an email about moderation. You can respond to that email to correspond with the moderators. Moderators typically respond within one business day.
            If you have not received that email, please <a href="@Url.RouteUrl(RouteName.PackageVersionAction, new { action = "ContactAdmins", id = Model.Id, version = Model.Version })" title="Contact Site Admins">contact Site Admins</a>.
        </p>

        if (moderationRole && maintainer)
        {
             <p class="message error">Since you are a maintainer of this package, you are not able to review it.</p>
        }
    }
    else if (maintainer && !Model.Listed)
    {
        <p class="message warning">This package is unlisted and hidden from package listings.
            You can see the package because you are one of its maintainers. To list the package
            again, <a href="@Url.DeletePackage(Model)">change its listing setting</a>. </p>
    }
    
    @* Maintainers always see the review comments *@
    @if (Model.Status == PackageStatusType.Submitted && !moderationRole && !maintainer)
    {
        if (!string.IsNullOrWhiteSpace(Model.ReviewComments))
        {
            <div class="message"><p>Review Comments:</p>
                @Html.Raw(markdownGenerator.Transform(Model.ReviewComments))
            </div><br />
        }
    } else if(maintainer && Model.Status != PackageStatusType.Rejected)
    {
      if (!string.IsNullOrWhiteSpace(Model.ReviewComments))
        {
            <div class="message"><p>Review Comments:</p>
                @Html.Raw(markdownGenerator.Transform(Model.ReviewComments))
            </div><br />
        }
    }

    @if (Model.Status == PackageStatusType.Approved)
    {
        <p class="message approved">This package was approved @reviewerComments on @Model.ApprovedDate.GetValueOrDefault().ToShortDateString().</p>
    }
    
    @if (Model.Listed && Model.Status != PackageStatusType.Approved && Model.Status != PackageStatusType.Exempted)
    {
        <p class="message error">This package was submitted prior to moderation and has not been approved. While it is likely safe for you, there is more risk involved.</p>
    }
    
    @if (Model.Listed && Model.Status == PackageStatusType.Exempted)
    {
        <p class="message error">This package is exempt from moderation. While it is likely safe for you, there is more risk involved.</p>
    }
    
    @if (moderationRole && !maintainer)
    {
        if (Model.Listed || Model.Status == PackageStatusType.Rejected)
        {
        <p class="message review-instructions">Review Package <a onclick="if ($(this).text() == 'Hide') {$('#div-review').hide();$(this).text('Show');} else {$('#div-review').show();$(this).text('Hide');}">Show</a></p>
            <script type="text/javascript">
                $(function() {
                    $('#div-review').hide();
                });
            </script>
        }
        <div id="div-review" class="message review-instructions">
            Instructions for review:
            <ul>
                <li>Moderators must have meticulous knowledge about our <a href="https://github.com/chocolatey/choco/wiki/CreatePackages">packaging guidelines</a>. Every package going into approved status must meet these guidelines.</li>
                <li>Leave comments here (will be emailed unless box is unchecked).</li>
                <li>Please do not reject a package until the end of the conversation.</li>
                <li>Moderators: Be very careful about moving a package from approved/exempt into submitted status. A package may be repushed when in this status (no matter how many downloads).</li>
                <li>Check the name of the package. Does it meet the guidelines? This makes a package immediately rejectable as new package id will be submitted as a different package.</li>
                <li>Check over the chocolateyInstall.ps1 - anything look unsafe? Download urls should be official distro</li>
                <li>Check dependencies</li>
                <li>Check tags</li>
                <li>Be Nice! :)</li>
            </ul> 
            @using (Html.BeginForm())
            {
                <fieldset class="form">
                    <div class="form-field">
                        @Html.LabelFor(m => m.ReviewComments)
                        @Html.TextAreaFor(m => m.ReviewComments, new { @cols = 80, @rows = 10 })
                        @Html.ValidationMessageFor(m => m.ReviewComments)
                        <span class="field-hint-message"></span>
                    </div>  

                    <div class="form-field">
                        @Html.LabelFor(m => m.Status)
                        @if (moderator)
                        {
                          @Html.DropDownListFor(m => m.Status, statuses)
                        }
                        else
                        {
                            @Html.DisplayTextFor(m => m.Status)
                        }
                        @Html.ValidationMessageFor(m => m.Status)
                        <span class="field-hint-message"></span>
                    </div>
                    <div class="form-field">
                        <input id="SendEmail" name="SendEmail" type="checkbox" checked="checked" value="true">
                        <label for="SendEmail" class="for-checkbox">Send Email</label>
                    </div>
                  
                    @Html.ValidationSummary(true)
                    <input type="submit" value="Save" title="Save Changes" />
                    
                   
                    <br /><br />
                    <a onclick="if ($(this).text() == 'Hide') {$('#div-trustedpackage').hide();$(this).text('Show Trusted Section');} else {$('#div-trustedpackage').show();$(this).text('Hide');}">Show Trusted Section</a>
           
                    <div class="form-field" id="div-trustedpackage">
                        <ul>
                            <li>Trusted package ids are packages where we have built trust in the package maintainer(s).</li>
                            <li>This usually happens after we have seen several iterations of a package without issues.</li>
                            <li>All package *versions* submitted from now on will automatically be approved.</li>
                            <li>This also happens when maintainer is the author of the software.</li>
                            <li>Use with care.</li>
                            <li>Use "Save" above to make this change. You may want to uncheck Send Email.</li>
                        </ul>
                        <br /> 
                        @if (moderator)
                        {
                            @Html.EditorFor(m => m.IsTrusted)
                            <label for="IsTrusted" class="checkbox">
                                Trust this package id? 
                            </label>
                        }
                        else
                        {
                            <text>This package is trusted?</text> @Html.DisplayTextFor(m => m.IsTrusted)
                        }
                    </div>  
                </fieldset> 
            }
             <script type="text/javascript">
                $(function () {
                    $('#div-trustedpackage').hide();
                });
            </script>
        
        </div>
    }

    @Html.Raw(markdownGenerator.Transform(Model.Description))

    <p>To install @Model.Title, run the following command from the command line or from
        PowerShell: </p>
    <div class="nuget-badge">
        <p><code><span>C:\&gt; </span>choco install @Model.Id.ToLower()
               @if (!Model.LatestVersion || !Model.Listed)
               { <text> -version @Model.Version</text> }
               @if (Model.Prerelease)
               {<text> -pre </text>}</code></p>
    </div>
    
    <p>To upgrade @Model.Title, run the following command from the command line or from
        PowerShell: </p>
    <div class="nuget-badge">
        <p><code><span>C:\&gt; </span>choco upgrade @Model.Id.ToLower()
               @if (!Model.LatestVersion || !Model.Listed)
               { <text> -version @Model.Version</text> }
               @if (Model.Prerelease)
               {<text> -pre </text>}</code></p>
    </div>
    
    <a name="files" id="files"></a><h3>Files</h3>
    <a onclick="if ($(this).text() == 'Hide') {$('#div-filessection').hide();$(this).text('Show');} else {$('#div-filessection').show();$(this).text('Hide');}">Hide</a>
    <div id="div-filessection">     
    @if (Model.Files.Any())
    {
        <ul>
            @foreach (var file in Model.Files)
            {
                <li>@file.FilePath
                    @if (!string.IsNullOrWhiteSpace(file.FileContent))
                    {
                        var fileDivId = "div-" + Path.GetFileName(file.FilePath).Replace(".", "-");
                        <a onclick="if ($(this).text() == 'Hide') {$('#@fileDivId').hide();$(this).text('Show');} else {$('#@fileDivId').show();$(this).text('Hide');}">
                        Show</a>
                        <br />
                        <div id="@fileDivId" class="package-file-content">
                            @{ var shBrush = "";
                            }
                            @switch (Path.GetExtension(file.FilePath))
                            {
                                case ".ps1":
                                case ".psm1":
                                    shBrush = "ps";
                                    break;
                                case ".xml":
                                case ".config":
                                    shBrush = "xml";
                                    break;
                                case ".js":
                                case ".json":
                                    shBrush = "js";
                                    break;
                                default:
                                    shBrush = "plain";
                                    break;
                            }
                            <pre class="brush: @shBrush">@file.FileContent</pre>
                        </div>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <ul>
            <li>Either there are no files or this package was submitted prior to inspecting packages for file content (July 2014). You can download and unzip the package or use <a href="https://chocolatey.org/packages/NugetPackageExplorer">Nuget Package Explorer</a> to see the contents.</li>
        </ul>
    }
    </div>
    
    @Html.Partial("_PackageDependencies", Model.Dependencies)

    <a name="maintainers" id="maintainers"></a><h3>Maintainers</h3>
    @ViewHelpers.OwnersGravatar(Model.Owners, 32, Url)
    <a name="authors" id="authors"></a><h3>Authors</h3>
    <ul class="authors">
        @foreach (var author in Model.Authors)
        {
            <li><a href="@Url.Search(author.Name)" title="Search for @author.Name">@author.Name</a></li>
        }
    </ul>
    @if (!String.IsNullOrEmpty(Model.Copyright))
    {
        <h3>Copyright</h3>
        <p>@Model.Copyright</p>
    }
    @if (@Model.Tags.AnySafe())
    {
        <a name="tags" id="tags"></a><h3>Tags</h3>
        <ul class="tags">
            @foreach (var tag in Model.Tags)
            {
                <li><a href="@Url.Search(tag)" title="Search for @tag">@tag</a></li>
            }
        </ul>
    }
    
    @if (!String.IsNullOrWhiteSpace(Model.ReleaseNotes))
    {
        <a name="releasenotes" id="releasenotes"></a><h3>Release Notes</h3>
        @Html.Raw(markdownGenerator.Transform(Model.ReleaseNotes))
    }
    <a name="versionhistory" id="versionhistory"></a><h3>Version History</h3>
    <table class="sexy-table">
        <thead>
            <tr>
                <th class="first">
                    Version
                </th>
                <th>
                    Downloads
                </th>
                <th>
                    Last updated
                </th>
                @if (Model.IsOwner(User))
                {
                    <th class="@(moderationRole ? "" : "last")">
                        Listed
                    </th>
                }
                else
                {
                  <th class="@(moderationRole ? "" : "last")">
                       Status
                    </th>
                }  
                @if (moderationRole)
                {
                    <th class="last">
                        Notes
                    </th>            
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var packageVersion in Model.PackageVersions)
            {
                if (packageVersion.Listed || Model.IsOwner(User) || packageVersion.Status == PackageStatusType.Submitted)
                {
                    <tr class="versionTableRow @if (packageVersion.LatestVersion)
                                               {<text>recommended </text>}">
                        <td class="version" @if (packageVersion.LatestVersion)
                                            {<text>title="Latest Version"</text>}>
                            @if (!packageVersion.IsCurrent(Model))
                            {
                                <a href="@Url.Package(packageVersion)">@packageVersion.Title @packageVersion.Version</a>
                            }
                            else
                            {
                                <span>@packageVersion.Title @packageVersion.Version</span>
                            }
                        </td>
                        <td>@packageVersion.DownloadCount
                        </td>
                        <td>@packageVersion.LastUpdated.ToString("D")
                        </td>
                        @if (Model.IsOwner(User))
                        {
                            <td>
                                <a href="@Url.DeletePackage(packageVersion)" class="delete">@(packageVersion.Listed ? "yes" : "no")</a>
                            </td>
                        }
                        else
                        {
                            switch (packageVersion.Status)
                            {
                                case PackageStatusType.Submitted:
                                    if (!Model.ReviewedDate.HasValue || Model.LastUpdated > Model.ReviewedDate)
                                    {
                                        <td>submitted</td>
                                    }
                                    else
                                    {
                                        <td>waiting</td>
                                    }
                                    break;
                                case PackageStatusType.Approved:
                                case PackageStatusType.Exempted:
                                    <td>@packageVersion.Status.GetDescriptionOrValue().ToLower()</td>
                                   break;
                                default:
                                    <td>&nbsp;</td>
                                   break;
                            }
                        }
                        @if (moderationRole)
                        {
                            var divVersionId = "divVersion-" + packageVersion.Version.ToString().Replace(".", "-");
                            <td>
                                @if (!string.IsNullOrWhiteSpace(packageVersion.ReviewComments))
                                {
                                    <a onclick="if ($(this).text() == 'Hide') {$('#@divVersionId').hide();$(this).text('Show');} else {$('#@divVersionId').show();$(this).text('Hide');}">
                                    Show</a>
                                    <div id="@divVersionId">
                                        <br />
                                          @Html.Raw(markdownGenerator.Transform(packageVersion.ReviewComments))
                                    </div>
                                <script type="text/javascript">
                                    $(function () {
                                        $('#@divVersionId').hide();
                                    });
                                </script>    
                                }
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
      
</div>
<div class="package-page">
    <a name="discussion" id="discussion"></a><h3>Discussion for the @Model.Title Package</h3>
    <p>Ground rules:
        <br />
        <ul>
            <li>This discussion is only about @Model.Title and the @Model.Title package. If you
                have feedback for chocolatey, please contact the <a href="http://groups.google.com/group/chocolatey">
                google group</a>.</li>
            <li>This discussion will carry over multiple versions. If you have a comment about a
                particular version, please note that in your comments.</li>
            <li>The maintainers of this Chocolatey Package will be notified about new comments that are posted to this Disqus thread, however, it is NOT a guarantee that you
                will get a response.  If you do not hear back from the maintainers after posting a message below, please follow up by using the link
                on the left side of this page or follow this link to <a href="@Url.Action(MVC.Packages.ContactOwners(Model.Id))">
                contact maintainers</a>.  If you still hear nothing back, please follow the <a href="https://github.com/chocolatey/choco/wiki/PackageTriageProcess">package triage process</a>.</li>
            <li>Tell us what you love about the package or @Model.Title, or tell us what needs improvement.</li>
            <li>Share your experiences with the package, or extra configuration or gotchas that
                you've found.</li>
        </ul>
    </p>
    @{
        var disqusUrl = "http://" + Request.Url.Host + @Url.Package(Model.Id);
        var disqusShortname = System.Configuration.ConfigurationManager.AppSettings["DisqusShortname"];
        bool forceSsl = Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["ForceSSL"]);
        var commentPostUrl = (forceSsl ? "https" : Request.Url.Scheme) + "://" + Request.Url.Authority + @Url.Package(Model.Id) + "/notify-comment";
    }
	<a name="disqus"></a>
    <div id="disqus_thread">
    </div>

    <script type="text/javascript">
        var disqus_shortname = '@disqusShortname';

        var disqus_url = '@disqusUrl';
        var commentItem;
        function disqus_config() {
            this.callbacks.onNewComment = [function (comment) {
                var commentViewModel = { Id: comment.id, Text: comment.text };

                // take the data and post it via json
                $.post('@commentPostUrl', commentViewModel, function (data) {
                    // At the minute, it is fire and forget
                });
            } ];
        }

        (function () {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>

    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shCore.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushPlain.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushPowerShell.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushJScript.js")"></script>
    <script language="javascript" type="text/javascript" src="@Url.Content("~/Scripts/SyntaxHighlighter/shBrushXml.js")"></script>
    <link type="text/css" rel="stylesheet" href="@Url.Content("~/Content/SyntaxHighlighter/shCore.css")" />
    <link type="text/css" rel="stylesheet" href="@Url.Content("~/Content/SyntaxHighlighter/shThemeDefault.css")" />

    <script type="text/javascript">
        SyntaxHighlighter.defaults['gutter'] = true;
        SyntaxHighlighter.defaults['tab-size'] = 2;
        SyntaxHighlighter.defaults['toolbar'] = false;
        SyntaxHighlighter.defaults['wrap-lines'] = false;
        SyntaxHighlighter.defaults['pad-line-numbers'] = false;
        SyntaxHighlighter.defaults['auto-links'] = true;
        SyntaxHighlighter.defaults['collapse'] = false;
        SyntaxHighlighter.all();
    </script>

    <noscript>
        Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments
        powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">
    Disqus</span></a>
</div>
