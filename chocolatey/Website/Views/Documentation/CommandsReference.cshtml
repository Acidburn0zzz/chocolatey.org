@{
  ViewBag.Title = "CommandsReference";
}

<article>
<h1 id="command-reference">Command Reference</h1>
<!-- This file is automatically generated based on output from the files at https://github.com/chocolatey/choco/tree/stable/src/chocolatey/infrastructure.app/commands using https://github.com/chocolatey/choco/tree/stable/GenerateDocs.ps1. Contributions are welcome at the original location(s). -->
<!-- TOC -->
<ul>
<li><a href="#commands">Commands</a></li>
<li><a href="#how-to-pass-options--switches">How To Pass Options / Switches</a></li>
<li><a href="#scripting--integration---best-practices--style-guide">Scripting / Integration - Best Practices / Style Guide</a></li>
<li><a href="#see-help-menu-in-action">See Help Menu In Action</a></li>
<li><a href="#default-options-and-switches">Default Options and Switches</a></li>
</ul>
<!-- /TOC -->
<h2 id="commands">Commands</h2>
<p>This is a listing of all of the different things you can pass to choco.</p>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-list" })">list</a> - lists remote or local packages</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-search" })">search</a> - searches remote or local packages (alias for list)</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-info" })">info</a> - retrieves package information. Shorthand for choco search pkgname --exact --verbose</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-install" })">install</a> - installs packages from various sources</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-pin" })">pin</a> - suppress upgrades for a package</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-outdated" })">outdated</a> - retrieves packages that are outdated. Similar to upgrade all --noop</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-upgrade" })">upgrade</a> - upgrades packages from various sources</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-uninstall" })">uninstall</a> - uninstalls a package</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-pack" })">pack</a> - packages up a nuspec to a compiled nupkg</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-push" })">push</a> - pushes a compiled nupkg</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-new" })">new</a> - generates files necessary for a chocolatey package from a template</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-sources" })">sources</a> - view and configure default sources (alias for source)</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-source" })">source</a> - view and configure default sources</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-config" })">config</a> - Retrieve and configure config file settings</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-feature" })">feature</a> - view and configure choco features</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-features" })">features</a> - view and configure choco features (alias for feature)</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-setapikey" })">setapikey</a> - retrieves or saves an apikey for a particular source (alias for apikey)</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-apikey" })">apikey</a> - retrieves or saves an apikey for a particular source</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-unpackself" })">unpackself</a> - have chocolatey set itself up</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-version" })">version</a> - [DEPRECATED] will be removed in v1 - use <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commandsoutdated" })"><code>choco outdated</code></a> or <code>cup &lt;pkg|all&gt; -whatif</code> instead</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-update" })">update</a> - [DEPRECATED] RESERVED for future use (you are looking for upgrade, these are not the droids you are looking for)</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-support" })">support</a> - provides support information</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-download" })">download</a> - downloads packages - optionally internalizing all remote resources</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-synchronize" })">synchronize</a> - synchronizes against system installed software - generates missing packages</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-sync" })">sync</a> - synchronizes against system installed software - generates missing packages</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-optimize" })">optimize</a> - optimizes installation, reducing space usage</li>
</ul>
<p>Please run chocolatey with <code>choco command -help</code> for specific help on<br />
each command.</p>
<h2 id="how-to-pass-options-switches">How To Pass Options / Switches</h2>
<p>You can pass options and switches in the following ways:</p>
<ul>
<li>Unless stated otherwise, an option/switch should only be passed one<br />
time. Otherwise you may find weird/non-supported behavior.</li>
<li><code>-</code>, <code>/</code>, or <code>--</code> (one character switches should not use <code>--</code>)</li>
<li><strong>Option Bundling / Bundled Options</strong>: One character switches can be<br />
bundled. e.g. <code>-d</code> (debug), <code>-f</code> (force), <code>-v</code> (verbose), and <code>-y</code><br />
(confirm yes) can be bundled as <code>-dfvy</code>.</li>
<li><strong>NOTE:</strong> If <code>debug</code> or <code>verbose</code> are bundled with local options<br />
(not the global ones above), some logging may not show up until after<br />
the local options are parsed.</li>
<li><strong>Use Equals</strong>: You can also include or not include an equals sign<br />
<code>=</code> between options and values.</li>
<li><strong>Quote Values</strong>: When you need to quote an entire argument, such as<br />
when using spaces, please use a combination of double quotes and<br />
apostrophes (<code>&quot;'value'&quot;</code>). In cmd.exe you can just use double quotes<br />
(<code>&quot;value&quot;</code>) but in powershell.exe you should use backticks<br />
(<code>`&quot;value`&quot;</code>) or apostrophes (<code>'value'</code>). Using the combination<br />
allows for both shells to work without issue, except for when the next<br />
section applies.</li>
<li><strong>Pass quotes in arguments</strong>: When you need to pass quoted values to<br />
to something like a native installer, you are in for a world of fun. In<br />
cmd.exe you must pass it like this: <code>-ia &quot;/yo=&quot;&quot;Spaces spaces&quot;&quot;&quot;</code>. In<br />
PowerShell.exe, you must pass it like this: <code>-ia '/yo=&quot;&quot;Spaces spaces&quot;&quot;'</code>.<br />
No other combination will work. In PowerShell.exe if you are on version<br />
v3+, you can try <code>--%</code> before <code>-ia</code> to just pass the args through as is,<br />
which means it should not require any special workarounds.</li>
<li><strong>Periods in PowerShell</strong>: If you need to pass a period as part of a<br />
value or a path, PowerShell doesn&#39;t always handle it well. Please<br />
quote those values using &quot;Quote Values&quot; section above.</li>
<li>Options and switches apply to all items passed, so if you are<br />
installing multiple packages, and you use <code>--version=1.0.0</code>, choco<br />
is going to look for and try to install version 1.0.0 of every<br />
package passed. So please split out multiple package calls when<br />
wanting to pass specific options.</li>
</ul>
<h2 id="scripting-integration---best-practices-style-guide">Scripting / Integration - Best Practices / Style Guide</h2>
<p>When writing scripts, such as PowerShell scripts passing options and<br />
switches, there are some best practices to follow to ensure that you<br />
don&#39;t run into issues later. This also applies to integrations that<br />
are calling Chocolatey and parsing output. Chocolatey <strong>uses</strong><br />
PowerShell, but it is an exe, so it cannot return PowerShell objects.</p>
<p>Following these practices ensures both readability of your scripts AND<br />
compatibility across different versions and editions of Chocolatey.<br />
Following this guide will ensure your experience is not frustrating<br />
based on choco not receiving things you think you are passing to it.</p>
<ul>
<li>For consistency, always use <code>choco</code>, not <code>choco.exe</code>. Never use<br />
shortcut commands like <code>cinst</code> or <code>cup</code>.</li>
<li>Always have the command as the first argument to <code>choco. e.g.  <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commandsinstall" })"></code>choco install<code></a>, where <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commandsinstall" })"></code>install`</a> is the command.</li>
<li>If there is a subcommand, ensure that is the second argument. e.g.<br />
<code>choco source list</code>, where <code>source</code> is the command and <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commandslist" })"><code>list</code></a> is the<br />
subcommand.</li>
<li>Typically the subject comes next. If installing packages, the<br />
subject would be the package names, e.g. <code>choco install pkg1 pkg2</code>.</li>
<li>Never use &#39;nupkg&#39; or point directly to a nupkg file UNLESS using<br />
&#39;choco push&#39;. Use the source folder instead, e.g. <code>choco install  &lt;package id&gt; --source=&quot;'c:\folder\with\package'&quot;</code> instead of<br />
<code>choco install DoNotDoThis.1.0.nupkg</code> or <code>choco install DoNotDoThis   --source=&quot;'c:\folder\with\package\DoNotDoThis.1.0.nupkg'&quot;</code>.</li>
<li>Switches and parameters are called simply options. Options come<br />
after the subject. e.g. <code>choco install pkg1 --debug --verbose</code>.</li>
<li>Never use the force option (<code>--force</code>/<code>-f</code>) in scripts (or really<br />
otherwise as a default mode of use). Force is an override on<br />
Chocolatey behavior. If you are wondering why Chocolatey isn&#39;t doing<br />
something like the documentation says it should, it&#39;s likely because<br />
you are using force. Stop.</li>
<li>Always use full option name. If the short option is <code>-n</code>, and the<br />
full option is <code>--name</code>, use <code>--name</code>. The only acceptable short<br />
option for use in scripts is <code>-y</code>. Find option names in help docs<br />
online or through <code>choco -?</code> /<code>choco [Command Name] -?</code>.</li>
<li>For scripts that are running automated, always use <code>-y</code>. Do note<br />
that even with <code>-y</code> passed, some things / state issues detected will<br />
temporarily stop for input - the key here is temporarily. They will<br />
continue without requiring any action after the temporary timeout<br />
(typically 30 seconds).</li>
<li>Full option names are prepended with two dashes, e.g. <code>--</code> or<br />
<code>--debug --verbose --ignore-proxy</code>.</li>
<li>When setting a value to an option, always put an equals (<code>=</code>)<br />
between the name and the setting, e.g. <code>--source=&quot;'local'&quot;</code>.</li>
<li>When setting a value to an option, always surround the value<br />
properly with double quotes bookending apostrophes, e.g.<br />
<code>--source=&quot;'internal_server'&quot;</code>.</li>
<li>If you are building PowerShell scripts, you can most likely just<br />
simply use apostrophes surrounding option values, e.g.<br />
<code>--source='internal_server'</code>.</li>
<li>Prefer upgrade to install in scripts. You can&#39;t <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commandsinstall" })"><code>install</code></a> to a newer<br />
version of something, but you can <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commandsupgrade" })"><code>choco upgrade</code></a> which will do both<br />
upgrade or install (unless switched off explicitly).</li>
<li>If you are sharing the script with others, pass <code>--source</code> to be<br />
explicit about where the package is coming from. Use full link and<br />
not source name (&#39;<a href="https://chocolatey.org/api/v2" class="uri">https://chocolatey.org/api/v2</a>&#39; versus<br />
&#39;chocolatey&#39;).</li>
<li>If parsing output, you might want to use <code>--limit-output</code>/<code>-r</code> to<br />
get output in a more machine parseable format. <strong>NOTE:</strong> Not all<br />
commands handle return of information in an easily digestible<br />
output.</li>
<li>Use exit codes to determine status. Chocolatey exits with 0 when<br />
everything worked appropriately and other exits codes like 1 when<br />
things error. There are package specific exit codes that are<br />
recommended to be used and reboot indicating exit codes as well. To<br />
check exit code when using PowerShell, immediately call<br />
<code>$exitCode = $LASTEXITCODE</code> to get the value choco exited with.</li>
</ul>
<p>Here&#39;s an example following bad practices (line breaks added for<br />
readability):</p>
<pre><code class="language-none">`choco install pkg1 -y -params &#39;/Option:Value /Option2:value with
 spaces&#39; --c4b-option &#39;Yaass&#39; --option-that-is-new &#39;dude upgrade&#39;`</code></pre>
<p>Now here is that example written with best practices (again line<br />
breaks added for readability - there are not line continuations<br />
for choco):</p>
<pre><code class="language-none">`choco upgrade pkg1 -y --source=&quot;&#39;https://chocolatey.org/api/v2&#39;&quot;
 --package-parameters=&quot;&#39;/Option:Value /Option2:value with spaces&#39;&quot;
 --c4b-option=&quot;&#39;Yaass&#39;&quot; --option-that-is-new=&quot;&#39;dude upgrade&#39;&quot;`</code></pre>
<p>Note the differences between the two:</p>
<ul>
<li>Which is more self-documenting?</li>
<li>Which will allow for the newest version of something installed or<br />
upgraded to (which allows for more environmental consistency on<br />
packages and versions)?</li>
<li>Which may throw an error on a badly passed option?</li>
<li>Which will throw errors on unknown option values? See explanation<br />
below.</li>
</ul>
<p>Chocolatey ignores options it doesn&#39;t understand, but it can only<br />
ignore option values if they are tied to the option with an<br />
equals sign (&#39;=&#39;). Note those last two options in the examples above?<br />
If you roll off of a commercial edition or someone with older version<br />
attempts to run the badly crafted script <code>--c4b-option 'Yaass'  --option-that-is-new 'dude upgrade'</code>, they are likely to see errors on<br />
&#39;Yaass&#39; and &#39;dude upgrade&#39; because they are not explicitly tied to the<br />
option they are written after. Now compare that to the other script.<br />
Choco will ignore <code>--c4b-option=&quot;'Yaass'&quot;</code> and<br />
<code>--option-that-is-new=&quot;'dude upgrade'&quot;</code> as a whole when it doesn&#39;t<br />
register the options. This means that your script doesn&#39;t error.</p>
<p>Following these scripting best practices will ensure your scripts work<br />
everywhere they are used and with newer versions of Chocolatey.</p>
<h2 id="see-help-menu-in-action">See Help Menu In Action</h2>
<p><img src="https://raw.githubusercontent.com/wiki/chocolatey/choco/images/gifs/choco_help.gif" alt="choco help in action" /></p>
<h2 id="default-options-and-switches">Default Options and Switches</h2>
<p><strong>NOTE:</strong> Options and switches apply to all items passed, so if you are<br />
running a command like install that allows installing multiple<br />
packages, and you use <code>--version=1.0.0</code>, it is going to look for and<br />
try to install version 1.0.0 of every package passed. So please split<br />
out multiple package calls when wanting to pass specific options.</p>
<pre><code class="language-none">
 -?, --help, -h
     Prints out the help menu.

 -d, --debug
     Debug - Show debug messaging.

 -v, --verbose
     Verbose - Show verbose messaging. Very verbose messaging, avoid using
       under normal circumstances.

     --trace
     Trace - Show trace messaging. Very, very verbose trace messaging. Avoid
       except when needing super low-level .NET Framework debugging. Available
       in 0.10.4+.

     --nocolor, --no-color
     No Color - Do not show colorization in logging output. This overrides
       the feature &#39;logWithoutColor&#39;, set to &#39;False&#39;. Available in 0.10.9+.

     --acceptlicense, --accept-license
     AcceptLicense - Accept license dialogs automatically. Reserved for
       future use.

 -y, --yes, --confirm
     Confirm all prompts - Chooses affirmative answer instead of prompting.
       Implies --accept-license

 -f, --force
     Force - force the behavior. Do not use force during normal operation -
       it subverts some of the smart behavior for commands.

     --noop, --whatif, --what-if
     NoOp / WhatIf - Don&#39;t actually do anything.

 -r, --limitoutput, --limit-output
     LimitOutput - Limit the output to essential information

     --timeout, --execution-timeout=VALUE
     CommandExecutionTimeout (in seconds) - The time to allow a command to
       finish before timing out. Overrides the default execution timeout in the
       configuration of 2700 seconds. &#39;0&#39; for infinite starting in 0.10.4.

 -c, --cache, --cachelocation, --cache-location=VALUE
     CacheLocation - Location for download cache, defaults to %TEMP% or value
       in chocolatey.config file.

     --allowunofficial, --allow-unofficial, --allowunofficialbuild, --allow-unofficial-build
     AllowUnofficialBuild - When not using the official build you must set
       this flag for choco to continue.

     --failstderr, --failonstderr, --fail-on-stderr, --fail-on-standard-error, --fail-on-error-output
     FailOnStandardError - Fail on standard error output (stderr), typically
       received when running external commands during install providers. This
       overrides the feature failOnStandardError.

     --use-system-powershell
     UseSystemPowerShell - Execute PowerShell using an external process
       instead of the built-in PowerShell host. Should only be used when
       internal host is failing. Available in 0.9.10+.

     --no-progress
     Do Not Show Progress - Do not show download progress percentages.
       Available in 0.10.4+.

     --proxy=VALUE
     Proxy Location - Explicit proxy location. Overrides the default proxy
       location of &#39;&#39;. Available for config settings in 0.9.9.9+, this CLI
       option available in 0.10.4+.

     --proxy-user=VALUE
     Proxy User Name - Explicit proxy user (optional). Requires explicity
       proxy (`--proxy` or config setting). Overrides the default proxy user of
       &#39;123&#39;. Available for config settings in 0.9.9.9+, this CLI option
       available in 0.10.4+.

     --proxy-password=VALUE
     Proxy Password - Explicit proxy password (optional) to be used with
       username. Requires explicity proxy (`--proxy` or config setting) and
       user name.  Overrides the default proxy password (encrypted in settings
       if set). Available for config settings in 0.9.9.9+, this CLI option
       available in 0.10.4+.

     --proxy-bypass-list=VALUE
     ProxyBypassList - Comma separated list of regex locations to bypass on
       proxy. Requires explicity proxy (`--proxy` or config setting). Overrides
       the default proxy bypass list of &#39;&#39;. Available in 0.10.4+.

     --proxy-bypass-on-local
     Proxy Bypass On Local - Bypass proxy for local connections. Requires
       explicity proxy (`--proxy` or config setting). Overrides the default
       proxy bypass on local setting of &#39;True&#39;. Available in 0.10.4+.

     --log-file=VALUE
     Log File to output to in addition to regular loggers. Available in 0.1-
       0.8+.
</code></pre>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>choco -h</code>.</p>
</article>
