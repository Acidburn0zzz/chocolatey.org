@{
  ViewBag.Title = "HelpersGetUninstallRegistryKey";
}

<article>
<h1 id="get-uninstallregistrykey">Get-UninstallRegistryKey</h1>
<p>Retrieve registry key(s) for system-installed applications from an<br />
exact or wildcard search.</p>
<h2 id="syntax">Syntax</h2>
<pre class="brush: ps">Get-UninstallRegistryKey `
  -SoftwareName &lt;String&gt; `
  [-IgnoredArguments &lt;Object[]&gt;] [&lt;CommonParameters&gt;]</pre>
<h2 id="description">Description</h2>
<p>This function will attempt to retrieve a matching registry key for an<br />
already installed application, usually to be used with a<br />
chocolateyUninstall.ps1 automation script.</p>
<p>The function also prevents <code>Get-ItemProperty</code> from failing when<br />
handling wrongly encoded registry keys.</p>
<h2 id="notes">Notes</h2>
<p>Available in 0.9.10+. If you need to maintain compatibility with pre<br />
0.9.10, please add the following to your nuspec:</p>
<pre class="brush: xml">&lt;dependencies&gt;
  &lt;dependency id=&quot;chocolatey-uninstall.extension&quot; /&gt;
&lt;/dependencies&gt;</pre>
<h2 id="aliases">Aliases</h2>
<p><code>Get-InstallRegistryKey</code></p>
<h2 id="examples">Examples</h2>
<p><strong>EXAMPLE 1</strong></p>
<pre class="brush: ps">
# Software name in Programs and Features is &quot;Gpg4Win (2.3.0)&quot;
[array]$key = Get-UninstallRegistryKey -SoftwareName &quot;Gpg4win*&quot;
$key.DisplayName</pre>
<p><strong>EXAMPLE 2</strong></p>
<pre class="brush: ps">
# Software name is &quot;Launchy 2.5&quot;
[array]$key = Get-UninstallRegistryKey -SoftwareName &quot;Launchy*&quot;
$key.UninstallString</pre>
<p><strong>EXAMPLE 3</strong></p>
<pre class="brush: ps">
# Software name is &quot;Mozilla Firefox&quot;
[array]$key = Get-UninstallRegistryKey -SoftwareName &quot;Mozilla Firefox&quot;
$key.UninstallString</pre>
<h2 id="inputs">Inputs</h2>
<p>None</p>
<h2 id="outputs">Outputs</h2>
<p>None</p>
<h2 id="parameters">Parameters</h2>
<h3 id="softwarename-string">-SoftwareName &lt;String&gt;</h3>
<p>Part or all of the Display Name as you see it in Programs and Features.<br />
It should be enough to be unique.</p>
<p>If the display name contains a version number, such as &quot;Launchy 2.5&quot;,<br />
it is recommended you use a fuzzy search <code>&quot;Launchy*&quot;</code> (the wildcard <code>*</code>)<br />
as if the version is upgraded or autoupgraded, suddenly the uninstall<br />
script will stop working and it may not be clear as to what went wrong<br />
at first.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>1</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByValue)</td>
</tr>
</tbody>
</table>
<h3 id="ignoredarguments-object">-IgnoredArguments [&lt;Object[]&gt;]</h3>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="commonparameters">&lt;CommonParameters&gt;</h3>
<p>This cmdlet supports the common parameters: -Verbose, -Debug, -ErrorAction, -ErrorVariable, -OutBuffer, and -OutVariable. For more information, see <code>about_CommonParameters</code> <a href="http://go.microsoft.com/fwlink/p/?LinkID=113216" class="uri">http://go.microsoft.com/fwlink/p/?LinkID=113216</a> .</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-package" })">Install-ChocolateyPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-install-package" })">Install-ChocolateyInstallPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-chocolatey-package" })">Uninstall-ChocolateyPackage</a></li>
</ul>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-reference" })">Function Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>Import-Module &quot;$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1&quot; -Force; Get-Help Get-UninstallRegistryKey -Full</code>.</p>
</article>
