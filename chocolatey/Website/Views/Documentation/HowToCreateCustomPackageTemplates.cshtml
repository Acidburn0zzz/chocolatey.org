@{
  ViewBag.Title = "How-To-Create-Custom-Package-Templates";
}

<article>
<h1 id="create-your-own-custom-package-templates">Create Your Own Custom Package Templates</h1>
<p>As of <a href="https://github.com/chocolatey/choco/issues/76">choco 0.9.9.9</a>, you can create your own custom package templates when the built-in template is not enough.</p>
<!-- TOC -->
<ul>
<li><a href="#overview">Overview</a>
<ul>
<li><a href="#where-do-templates-go">Where Do Templates Go?</a></li>
<li><a href="#can-i-replace-the-built-in-template">Can I replace the built-in template?</a></li>
<li><a href="#what-values-can-i-template">What values can I template?</a></li>
</ul></li>
<li><a href="#example">Example</a>
<ul>
<li><a href="#manage-as-templates-as-packages">Manage as Templates as Packages</a></li>
<li><a href="#extending-templates">Extending Templates</a></li>
<li><a href="#are-there-planned-enhancements">Are There Planned Enhancements?</a></li>
</ul></li>
</ul>
<!-- /TOC -->
<h2 id="overview">Overview</h2>
<p>A template is used for creating packages. Chocolatey (choco) has a built-in template that it uses when generating a new package from the command <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-new" })"><code>choco new</code></a>.</p>
<h3 id="where-do-templates-go">Where Do Templates Go?</h3>
<p>If you drop a template into <code>$env:ChocolateyInstall\templates</code> folder, you can use <code>-t name_of_template</code> to generate a choco template based on that. So for:</p>
<p><img src="https://cloud.githubusercontent.com/assets/63502/9952997/0603b334-5da2-11e5-8b6d-65a5dbf5d8e0.png" alt="image" /></p>
<p>You would call <code>choco new pkgname -t organization</code> and choco will use the template folder instead of the built-in template.</p>
<h3 id="can-i-replace-the-built-in-template">Can I replace the built-in template?</h3>
<p>To replace the built-in template, you should put a folder in the template with the name of &quot;default&quot;. Then choco will use that instead of the built-in template with no need to specify a template name.</p>
<h3 id="what-values-can-i-template">What values can I template?</h3>
<p>You can get the names by running <code>choco new -h</code>:</p>
<pre><code class="nohighlight">Possible properties to pass:
    packageversion
    maintainername
    maintainerrepo
    installertype
    url
    url64
    silentargs</code></pre>
<p>However <code>PackageName</code> and <code>PackageNameLower</code> also show up as they are based on the name of the package that you pass e.g. &quot;bob&quot; in <code>choco new bob</code></p>
<p>Then you surround those templated values with <code>[[]]</code> to make them templated for choco to use.</p>
<p><strong>NOTE</strong>: You can set and pass arbitrary values through as well. This is shown in the example with <code>CustomValue</code>.</p>
<h2 id="example">Example</h2>
<p>This is a template for embedding an MSI into a package. This removes almost everything that is unnecessary for embedding software into packages. And because the autoUninstaller handles MSIs without an issue, we don&#39;t need a chocolateyUninstall.ps1.</p>
<p>A file with the extension <code>.nuspec</code>:</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd&quot;&gt;
  &lt;metadata&gt;
    &lt;id&gt;[[PackageNameLower]]&lt;/id&gt;
    &lt;title&gt;[[PackageName]] (Install)&lt;/title&gt;
    &lt;version&gt;[[PackageVersion]]&lt;/version&gt;
    &lt;authors&gt;Original authors&lt;/authors&gt;
    &lt;owners&gt;[[MaintainerName]]&lt;/owners&gt;
    &lt;description&gt;__REPLACE__MarkDown_Okay [[AutomaticPackageNotesNuspec]]
    &lt;/description&gt;
    &lt;tags&gt;[[PackageNameLower]] admin&lt;/tags&gt;
    &lt;!--&lt;dependencies&gt;
      &lt;dependency id=&quot;&quot; version=&quot;__VERSION__&quot; /&gt;
      &lt;dependency id=&quot;&quot; /&gt;
    &lt;/dependencies&gt;--&gt;
  &lt;/metadata&gt;
  &lt;files&gt;
    &lt;file src=&quot;tools\**&quot; target=&quot;tools&quot; /&gt;
  &lt;/files&gt;
&lt;/package&gt;</code></pre>
<p><code>tools\chocolateyInstall.ps1</code>:</p>
<pre><code class="powershell"># Custom value: [[CustomValue]]
$ErrorActionPreference = &#39;Stop&#39;; # stop on all errors

[[AutomaticPackageNotesInstaller]]
$packageName  = &#39;[[PackageName]]&#39;
$toolsDir     = &quot;$(Split-Path -parent $MyInvocation.MyCommand.Definition)&quot;
$fileLocation = Join-Path $toolsDir &#39;NAME_OF_EMBEDDED_INSTALLER_FILE&#39;

$packageArgs = @@{
  packageName   = $packageName
  file          = $fileLocation
  fileType      = &#39;[[InstallerType]]&#39; #only one of these: exe, msi, msu

  #MSI
  silentArgs    = &quot;/qn /norestart /l*v `&quot;$env:TEMP\chocolatey\$($packageName)\$($packageName).MsiInstall.log`&quot;&quot;
  validExitCodes= @@(0, 3010, 1641)
  #OTHERS
  #silentArgs   =&#39;[[SilentArgs]]&#39; # /s /S /q /Q /quiet /silent /SILENT /VERYSILENT -s - try any of these to get the silent installer
  #validExitCodes= @@(0) #please insert other valid exit codes here
}

Install-ChocolateyInstallPackage @@packageArgs</code></pre>
<p>Once installed, call this with <code>choco new test -t mytemplatename CustomValue=Yes</code></p>
<h3 id="manage-as-templates-as-packages">Manage as Templates as Packages</h3>
<p>If you have Chocolatey v0.9.10+, then you can manage templates as packages themselves, allowing you to upgrade a template when a new version is available. When it comes to packaging templates, Chocolatey takes a conventional approach. You must create a package with the suffix &quot;.template&quot; and have a templates folder.</p>
<p>To manage a template as a package, create a new package with the name &quot;templatename.template&quot;. The name of the package minus the &quot;.template&quot; will be the name of the template.</p>
<p>Then create a templates folder. This is where the template goes. the only thing to remember is that the nuspec file created here must end in &quot;.template&quot; as a Chocolatey package allows only one nuspec file.</p>
<p>Here&#39;s an example: <a href="https://chocolatey.org/packages/zip.template" class="uri">https://chocolatey.org/packages/zip.template</a>. The source is at <a href="https://github.com/ferventcoder/chocolatey-packages/tree/master/manual/zip.template" class="uri">https://github.com/ferventcoder/chocolatey-packages/tree/master/manual/zip.template</a></p>
<p>Yes, it is really that easy. Enjoy!</p>
<h3 id="extending-templates">Extending Templates</h3>
<p>Walmart has a really good post on extending package templates. You can read that at <a href="https://chocolatey.org/blog/extending-chocolatey-packaging-at-walmart" class="uri">https://chocolatey.org/blog/extending-chocolatey-packaging-at-walmart</a></p>
<h3 id="are-there-planned-enhancements">Are There Planned Enhancements?</h3>
<ul>
<li>List Template names - <a href="https://github.com/chocolatey/choco/issues/449" class="uri">https://github.com/chocolatey/choco/issues/449</a></li>
</ul>
</article>
