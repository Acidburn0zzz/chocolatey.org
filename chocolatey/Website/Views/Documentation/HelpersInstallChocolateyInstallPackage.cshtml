@{
  ViewBag.Title = "HelpersInstallChocolateyInstallPackage";
}

<article>
<h1 id="install-chocolateyinstallpackage">Install-ChocolateyInstallPackage</h1>
<!-- This documentation is automatically generated from https://github.com/chocolatey/choco/tree/stable/src/chocolatey.resources/helpers/functions/Install-ChocolateyInstallPackage.ps1 using https://github.com/chocolatey/choco/tree/stable/GenerateDocs.ps1. Contributions are welcome at the original location(s). -->
<p><strong>NOTE:</strong> Administrative Access Required.</p>
<p>Installs software into &quot;Programs and Features&quot;. Use<br />
Install-ChocolateyPackage when software must be downloaded first.</p>
<h2 id="syntax">Syntax</h2>
<pre><code class="powershell">Install-ChocolateyInstallPackage `
  -PackageName &lt;String&gt; `
  [-FileType &lt;String&gt;] `
  [-SilentArgs &lt;String[]&gt;] `
  -File &lt;String&gt; `
  [-ValidExitCodes &lt;Object&gt;] `
  [-UseOnlyPackageSilentArguments] `
  [-IgnoredArguments &lt;Object[]&gt;] [&lt;CommonParameters&gt;]</code></pre>
<h2 id="description">Description</h2>
<p>This will run an installer (local file) on your machine.</p>
<h2 id="notes">Notes</h2>
<p>This command will assert UAC/Admin privileges on the machine.</p>
<p>If you are embedding files into a package, ensure that you have the<br />
rights to redistribute those files if you are sharing this package<br />
publicly (like on the <a href="https://chocolatey.org/packages">community feed</a>). Otherwise, please use<br />
Install-ChocolateyPackage to download those resources from their<br />
official distribution points.</p>
<p>This is a native installer wrapper function. A &quot;true&quot; package will<br />
contain all the run time files and not an installer. That could come<br />
pre-zipped and require unzipping in a PowerShell script. Chocolatey<br />
works best when the packages contain the software it is managing. Most<br />
software in the Windows world comes as installers and Chocolatey<br />
understands how to work with that, hence this wrapper function.</p>
<h2 id="aliases">Aliases</h2>
<p>None</p>
<h2 id="examples">Examples</h2>
<p><strong>EXAMPLE 1</strong></p>
<pre><code class="powershell">
$packageName= &#39;bob&#39;
$toolsDir   = &quot;$(Split-Path -Parent $MyInvocation.MyCommand.Definition)&quot;
$fileLocation = Join-Path $toolsDir &#39;INSTALLER_EMBEDDED_IN_PACKAGE&#39;

$packageArgs = @@{
  packageName   = $packageName
  fileType      = &#39;msi&#39;
  file          = $fileLocation
  silentArgs    = &quot;/qn /norestart&quot;
  validExitCodes= @@(0, 3010, 1641)
  softwareName  = &#39;Bob*&#39;
}

Install-ChocolateyInstallPackage @@packageArgs</code></pre>
<p><strong>EXAMPLE 2</strong></p>
<pre><code class="powershell">
$packageArgs = @@{
  packageName   = &#39;bob&#39;
  fileType      = &#39;exe&#39;
  file          = &#39;\\SHARE_LOCATION\to\INSTALLER_FILE&#39;
  silentArgs    = &quot;/S&quot;
  validExitCodes= @@(0)
  softwareName  = &#39;Bob*&#39;
}

Install-ChocolateyInstallPackage @@packageArgs</code></pre>
<p><strong>EXAMPLE 3</strong></p>
<pre><code class="powershell">Install-ChocolateyInstallPackage &#39;bob&#39; &#39;exe&#39; &#39;/S&#39; &quot;$(Split-Path -Parent $MyInvocation.MyCommand.Definition)\bob.exe&quot;
</code></pre>
<p><strong>EXAMPLE 4</strong></p>
<pre><code class="powershell">
Install-ChocolateyInstallPackage -PackageName &#39;bob&#39; -FileType &#39;exe&#39; `
  -SilentArgs &#39;/S&#39; `
  -File &quot;$(Split-Path -Parent $MyInvocation.MyCommand.Definition)\bob.exe&quot; `
  -ValidExitCodes = @@(0)</code></pre>
<h2 id="inputs">Inputs</h2>
<p>None</p>
<h2 id="outputs">Outputs</h2>
<p>None</p>
<h2 id="parameters">Parameters</h2>
<h3 id="packagename-string">-PackageName &lt;String&gt;</h3>
<p>The name of the package - while this is an arbitrary value, it&#39;s<br />
recommended that it matches the package id.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>1</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="filetype-string">-FileType [&lt;String&gt;]</h3>
<p>This is the extension of the file. This can be &quot;˜exe&#39;, &quot;˜msi&#39;, or &quot;˜msu&#39;.<br />
<a href="https://chocolatey.org/compare">Licensed editions</a> of Chocolatey use this to automatically determine<br />
silent arguments. If this is not provided, Chocolatey will<br />
automatically determine this using the downloaded file&#39;s extension.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td>installerType, installType</td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>2</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td>exe</td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="silentargs-string">-SilentArgs [&lt;String[]&gt;]</h3>
<p>OPTIONAL - These are the parameters to pass to the native installer,<br />
including any arguments to make the installer silent/unattended.<br />
Pro/Business Editions of Chocolatey will automatically determine the<br />
installer type and merge the arguments with what is provided here.</p>
<p>Try any of the to get the silent installer -<br />
<code>/s /S /q /Q /quiet /silent /SILENT /VERYSILENT</code>. With msi it is always<br />
<code>/quiet</code>. Please pass it in still but it will be overridden by<br />
Chocolatey to <code>/quiet</code>. If you don&#39;t pass anything it could invoke the<br />
installer with out any arguments. That means a nonsilent installer.</p>
<p>Please include the <code>notSilent</code> tag in your Chocolatey package if you<br />
are not setting up a silent/unattended package. Please note that if you<br />
are submitting to the <a href="https://chocolatey.org/packages">community repository</a>, it is nearly a requirement<br />
for the package to be completely unattended.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>3</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="file-string">-File &lt;String&gt;</h3>
<p>Full file path to native installer to run. If embedding in the package,<br />
you can get it to the path with<br />
<code>&quot;$(Split-Path -parent $MyInvocation.MyCommand.Definition)\\INSTALLER_FILE&quot;</code></p>
<p>In 0.10.1+, <code>FileFullPath</code> is an alias for File.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td>fileFullPath</td>
</tr>
<tr class="even">
<td>Required?</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>4</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="validexitcodes-object">-ValidExitCodes [&lt;Object&gt;]</h3>
<p>Array of exit codes indicating success. Defaults to <code>@@(0)</code>.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td>@@(0)</td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="useonlypackagesilentarguments">-UseOnlyPackageSilentArguments</h3>
<p>Do not allow choco to provide/merge additional silent arguments and<br />
only use the ones available with the package. Available in 0.9.10+.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td>useOnlyPackageSilentArgs</td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td>False</td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="ignoredarguments-object">-IgnoredArguments [&lt;Object[]&gt;]</h3>
<p>Allows splatting with arguments that do not apply. Do not use directly.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="commonparameters">&lt;CommonParameters&gt;</h3>
<p>This cmdlet supports the common parameters: -Verbose, -Debug, -ErrorAction, -ErrorVariable, -OutBuffer, and -OutVariable. For more information, see <code>about_CommonParameters</code> <a href="http://go.microsoft.com/fwlink/p/?LinkID=113216" class="uri">http://go.microsoft.com/fwlink/p/?LinkID=113216</a> .</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-package" })">Install-ChocolateyPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-chocolatey-package" })">Uninstall-ChocolateyPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-uninstall-registry-key" })">Get-UninstallRegistryKey</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-start-chocolatey-process-as-admin" })">Start-ChocolateyProcessAsAdmin</a></li>
</ul>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-reference" })">Function Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>Import-Module &quot;$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1&quot; -Force; Get-Help Install-ChocolateyInstallPackage -Full</code>.</p>
<p>View the source for <a href="https://github.com/chocolatey/choco/tree/stable/src/chocolatey.resources/helpers/functions/Install-ChocolateyInstallPackage.ps1">Install-ChocolateyInstallPackage</a></p>
</article>
