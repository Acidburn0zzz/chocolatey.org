@{
  ViewBag.Title = "How-To-Set-Up-Chocolatey-Server";
}

<article>
<h1 id="how-to-setup-the-chocolatey.server-package">How To Setup the Chocolatey.Server Package</h1>
<p>The <a href="https://chocolatey.org/packages/chocolatey.server">Chocolatey.Server package</a> contains the binaries for a fully ready to go Chocolatey NuGet Server where you can serve packages over HTTP using a NuGet-compatible OData feed.</p>
<p><a href="https://chocolatey.org/packages/chocolatey.server">Chocolatey Server</a> is a simple Nuget.Server that is ready to rock and roll. It has already completed Steps 1–3 of NuGet&#39;s <a href="https://docs.nuget.org/Create/Hosting-Your-Own-NuGet-Feeds#creating-remote-feeds">host your own remote feed</a>. Version 0.1.2 has the following additional adds:</p>
<ul>
<li>Uses same enhanced NuGet that Chocolatey uses so you can see more information in search if you choose to use those things.</li>
<li>Allows packages up to 2GB. Package size can be controlled through <a href="https://msdn.microsoft.com/en-us/library/ms689462(v=vs.90).aspx">maxAllowedContentLength</a> and <a href="https://msdn.microsoft.com/en-us/library/e1f13641(v=vs.100).aspx">maxRequestLength</a>.</li>
</ul>
<p>When you install it, it will install the website typically to <code>c:\tools\chocolatey.server</code>.</p>
<h2 id="setup-with-puppet">Setup with Puppet</h2>
<p>If you are using the Puppet module <a href="https://forge.puppet.com/chocolatey/chocolatey_server">chocolatey/chocolatey_server</a>, it will do all of the additional setup for this package and allow some customization.</p>
<p>The module works with Windows Server 2008/2012.<br />
For a simple <code>include chocolatey_server</code> it does the following automatically:</p>
<ul>
<li>Ensures IIS is installed</li>
<li>Ensures ASP.NET is installed</li>
<li>Ensures the chocolatey.server package is installed</li>
<li>Ensures an app pool for the chocolatey.server site</li>
<li>Ensures the IIS website is setup for chocolatey.server</li>
<li>Ensures permissions for the site are set correctly.</li>
</ul>
<h2 id="setup-normally">Setup Normally</h2>
<ul>
<li>Install or upgrade the package - <code>choco upgrade chocolatey.server -y</code></li>
<li>Ensure IIS is installed. You can try <code>choco install IIS-WebServer --source windowsfeatures</code></li>
<li>Ensure that ASP.NET is installed. Try <code>choco install IIS-ASPNET45 --source windowsfeatures</code> (<code>IIS-ASPNET</code> for Windows 2008).</li>
<li>Set up an app pool for Chocolatey.Server. Ensure 32-bit is enabled and the managed runtime version is <code>v4.0</code>.</li>
<li>Set up the IIS website pointed to the install location and set it to use the app pool.</li>
<li>Go to explorer and right click on <code>c:\tools\chocolatey.server</code> and add the following permissions:</li>
<li><code>IIS_IUSRS</code> - Read</li>
<li><code>IUSR</code> - Read</li>
<li><code>IIS APPPOOL\&lt;app pool name&gt;</code> - Read</li>
<li>Right click on the <code>App_Data</code> subfolder and add the following permissions:</li>
<li><code>IIS_IUSRS</code> - Modify</li>
<li><code>IIS APPPOOL\&lt;app pool name&gt;</code> - Modify</li>
</ul>
<h2 id="additional-configuration">Additional Configuration</h2>
<p>Looking for where the apikey is and how it is changed, that is all done through the web.config. The config is pretty well-documented on each of the appSettings key values.</p>
<p>To update the apiKey, it is kept in the web.config, search for that value and update it. If you reach out to the server on <a href="https://localhost" class="uri">https://localhost</a> (it will show you what the apikey is, only locally though).</p>
</article>
