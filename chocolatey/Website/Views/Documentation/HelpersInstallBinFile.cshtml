@{
  ViewBag.Title = "HelpersInstallBinFile";
}

<article>
<h1 id="install-binfile">Install-BinFile</h1>
<p>Creates a shim (or batch redirect) for a file that is on the PATH.</p>
<h2 id="syntax">Syntax</h2>
<pre class="brush: ps">Install-BinFile `
  -Name &lt;String&gt; `
  -Path &lt;String&gt; `
  [-UseStart] `
  [-Command &lt;String&gt;] `
  [-IgnoredArguments &lt;Object[]&gt;] [&lt;CommonParameters&gt;]</pre>
<h2 id="description">Description</h2>
<p>Chocolatey installs have the folder <code>$($env:ChocolateyInstall)\bin</code><br />
included in the PATH environment variable. Chocolatey automatically<br />
shims executables in package folders that are not explicitly ignored,<br />
putting them into the bin folder (and subsequently onto the PATH).</p>
<p>When you have other files you want to shim to add them to the PATH or<br />
if you want to handle the shimming explicitly, use this function.</p>
<p>If you do use this function, ensure you also add <code>Uninstall-BinFile</code> to<br />
your <code>chocolateyUninstall.ps1</code> script as Chocolatey will not<br />
automatically clean up shims created with this function.</p>
<h2 id="notes">Notes</h2>
<p>Not normally needed for exe files in the package folder, those are<br />
automatically discovered and added as shims after the install script<br />
completes.</p>
<h2 id="aliases">Aliases</h2>
<p>None</p>
<h2 id="inputs">Inputs</h2>
<p>None</p>
<h2 id="outputs">Outputs</h2>
<p>None</p>
<h2 id="parameters">Parameters</h2>
<h3 id="name-string">-Name &lt;String&gt;</h3>
<p>The name of the redirect file, will have .exe appended to it.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>1</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="path-string">-Path &lt;String&gt;</h3>
<p>The path to the original file. Can be relative from<br />
<code>$($env:ChocolateyInstall)\bin</code> back to your file or a full path to the<br />
file.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>2</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="usestart">-UseStart</h3>
<p>This should be passed if the shim should not wait on the action to<br />
complete. This is usually the case with GUI apps, you don&#39;t want the<br />
command shell blocked waiting for the GUI app to be shut back down.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td>isGui</td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td>False</td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="command-string">-Command [&lt;String&gt;]</h3>
<p>OPTIONAL - This is any additional command arguments you want passed<br />
every time to the command. This is not normally used, but may be<br />
necessary if you are calling something and then your application. For<br />
example if you are calling Java with your JAR, the command would be the<br />
JAR file plus any other options to start Java appropriately.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="ignoredarguments-object">-IgnoredArguments [&lt;Object[]&gt;]</h3>
<p>Allows splatting with arguments that do not apply. Do not use directly.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="commonparameters">&lt;CommonParameters&gt;</h3>
<p>This cmdlet supports the common parameters: -Verbose, -Debug, -ErrorAction, -ErrorVariable, -OutBuffer, and -OutVariable. For more information, see <code>about_CommonParameters</code> <a href="http://go.microsoft.com/fwlink/p/?LinkID=113216" class="uri">http://go.microsoft.com/fwlink/p/?LinkID=113216</a> .</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-bin-file" })">Uninstall-BinFile</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-shortcut" })">Install-ChocolateyShortcut</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-path" })">Install-ChocolateyPath</a></li>
</ul>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-reference" })">Function Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>Import-Module &quot;$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1&quot; -Force; Get-Help Install-BinFile -Full</code>.</p>
</article>
