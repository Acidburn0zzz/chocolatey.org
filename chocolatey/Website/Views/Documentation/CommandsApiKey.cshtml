@{
  ViewBag.Title = "CommandsApiKey";
}

<article>
<!-- This file is automatically generated based on output from https://github.com/chocolatey/choco/tree/stable/src/chocolatey/infrastructure.app/commands/ChocolateyApikeyCommand.cs using https://github.com/chocolatey/choco/tree/stable/GenerateDocs.ps1. Contributions are welcome at the original location(s). If the file is not found, it is not part of the open source edition of Chocolatey or the name of the file is different. -->
<h1 id="apikey-command-choco-apikey">ApiKey Command (choco apikey)</h1>
<p>This lists api keys that are set or sets an api key for a particular<br />
source so it doesn&#39;t need to be specified every time.</p>
<p>Anything that doesn&#39;t contain source and key will list api keys.</p>
<h2 id="usage">Usage</h2>
<pre><code class="nohighlight">  choco apikey [&lt;options/switches&gt;]
  choco setapikey [&lt;options/switches&gt;]</code></pre>
<h2 id="examples">Examples</h2>
<pre><code class="nohighlight">  choco apikey
  choco apikey -s https://somewhere/out/there
  choco apikey -s=&quot;https://somewhere/out/there/&quot; -k=&quot;value&quot;
  choco apikey -s &quot;https://push.chocolatey.org/&quot; -k=&quot;123-123123-123&quot;
  choco apikey -s &quot;http://internal_nexus&quot; -k=&quot;user:password&quot;</code></pre>
<p>For source location, this can be a folder/file share or an<br />
http location. When it comes to urls, they can be different from the packages<br />
url (where packages are searched and installed from). As an example, for<br />
Chocolatey&#39;s community package package repository, the package url is<br />
<a href="https://chocolatey.org/api/v2" class="uri">https://chocolatey.org/api/v2</a>, but the push url is <a href="https://push.chocolatey.org" class="uri">https://push.chocolatey.org</a><br />
(and the deprecated <a href="https://chocolatey.org/" class="uri">https://chocolatey.org/</a> as a push url). Check the<br />
documentation for your choice of repository to learn what the push url is.</p>
<p>For the key, this can be an apikey that is provided by your source repository.<br />
With some sources, like Nexus, this can be a NuGet API key or it could be a<br />
user name and password specified as &#39;user:password&#39; for the API key. Please see<br />
your repository&#39;s documentation (for Nexus, please see<br />
<a href="https://bit.ly/nexus2apikey" class="uri">https://bit.ly/nexus2apikey</a>).</p>
<h2 id="connecting-to-chocolateyorg-community-package-repository">Connecting to Chocolatey.org (Community Package Repository)</h2>
<p>In order to save your API key for <a href="https://push.chocolatey.org/" class="uri">https://push.chocolatey.org/</a>,<br />
log in (or register, confirm and then log in) to<br />
<a href="https://push.chocolatey.org/" class="uri">https://push.chocolatey.org/</a>, go to <a href="https://push.chocolatey.org/account" class="uri">https://push.chocolatey.org/account</a>,<br />
copy the API Key, and then use it in the following command:</p>
<pre><code class="nohighlight">  choco apikey -k &lt;your key here&gt; -s https://push.chocolatey.org/</code></pre>
<h2 id="options-and-switches">Options and Switches</h2>
<p><strong>NOTE:</strong> Options and switches apply to all items passed, so if you are<br />
running a command like install that allows installing multiple<br />
packages, and you use <code>--version=1.0.0</code>, it is going to look for and<br />
try to install version 1.0.0 of every package passed. So please split<br />
out multiple package calls when wanting to pass specific options.</p>
<p>Includes <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-reference" })#default-options-and-switches">default options/switches</a> (included below for completeness).</p>
<pre><code class="nohighlight">
 -?, --help, -h
     Prints out the help menu.

 -d, --debug
     Debug - Show debug messaging.

 -v, --verbose
     Verbose - Show verbose messaging. Very verbose messaging, avoid using 
       under normal circumstances.

     --trace
     Trace - Show trace messaging. Very, very verbose trace messaging. Avoid 
       except when needing super low-level .NET Framework debugging. Available 
       in 0.10.4+.

     --nocolor, --no-color
     No Color - Do not show colorization in logging output. This overrides 
       the feature &#39;logWithoutColor&#39;, set to &#39;False&#39;. Available in 0.10.9+.

     --acceptlicense, --accept-license
     AcceptLicense - Accept license dialogs automatically. Reserved for 
       future use.

 -y, --yes, --confirm
     Confirm all prompts - Chooses affirmative answer instead of prompting. 
       Implies --accept-license

 -f, --force
     Force - force the behavior. Do not use force during normal operation - 
       it subverts some of the smart behavior for commands.

     --noop, --whatif, --what-if
     NoOp / WhatIf - Don&#39;t actually do anything.

 -r, --limitoutput, --limit-output
     LimitOutput - Limit the output to essential information

     --timeout, --execution-timeout=VALUE
     CommandExecutionTimeout (in seconds) - The time to allow a command to 
       finish before timing out. Overrides the default execution timeout in the 
       configuration of 2700 seconds. &#39;0&#39; for infinite starting in 0.10.4.

 -c, --cache, --cachelocation, --cache-location=VALUE
     CacheLocation - Location for download cache, defaults to %TEMP% or value 
       in chocolatey.config file.

     --allowunofficial, --allow-unofficial, --allowunofficialbuild, --allow-unofficial-build
     AllowUnofficialBuild - When not using the official build you must set 
       this flag for choco to continue.

     --failstderr, --failonstderr, --fail-on-stderr, --fail-on-standard-error, --fail-on-error-output
     FailOnStandardError - Fail on standard error output (stderr), typically 
       received when running external commands during install providers. This 
       overrides the feature failOnStandardError.

     --use-system-powershell
     UseSystemPowerShell - Execute PowerShell using an external process 
       instead of the built-in PowerShell host. Should only be used when 
       internal host is failing. Available in 0.9.10+.

     --no-progress
     Do Not Show Progress - Do not show download progress percentages. 
       Available in 0.10.4+.

     --proxy=VALUE
     Proxy Location - Explicit proxy location. Overrides the default proxy 
       location of &#39;&#39;. Available for config settings in 0.9.9.9+, this CLI 
       option available in 0.10.4+.

     --proxy-user=VALUE
     Proxy User Name - Explicit proxy user (optional). Requires explicity 
       proxy (`--proxy` or config setting). Overrides the default proxy user of 
       &#39;123&#39;. Available for config settings in 0.9.9.9+, this CLI option 
       available in 0.10.4+.

     --proxy-password=VALUE
     Proxy Password - Explicit proxy password (optional) to be used with 
       username. Requires explicity proxy (`--proxy` or config setting) and 
       user name.  Overrides the default proxy password (encrypted in settings 
       if set). Available for config settings in 0.9.9.9+, this CLI option 
       available in 0.10.4+.

     --proxy-bypass-list=VALUE
     ProxyBypassList - Comma separated list of regex locations to bypass on 
       proxy. Requires explicity proxy (`--proxy` or config setting). Overrides 
       the default proxy bypass list of &#39;&#39;. Available in 0.10.4+.

     --proxy-bypass-on-local
     Proxy Bypass On Local - Bypass proxy for local connections. Requires 
       explicity proxy (`--proxy` or config setting). Overrides the default 
       proxy bypass on local setting of &#39;True&#39;. Available in 0.10.4+.

     --log-file=VALUE
     Log File to output to in addition to regular loggers. Available in 0.1-
       0.8+.

 -s, --source=VALUE
     Source [REQUIRED] - The source location for the key

 -k, --key, --apikey, --api-key=VALUE
     ApiKey - The API key for the source. This is the authentication that 
       identifies you and allows you to push to a source. With some sources 
       this is either a key or it could be a user name and password specified 
       as &#39;user:password&#39;.
</code></pre>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-reference" })">Command Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>choco apikey -h</code>.</p>
</article>
