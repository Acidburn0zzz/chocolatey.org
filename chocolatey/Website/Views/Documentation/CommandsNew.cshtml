@{
  ViewBag.Title = "CommandsNew";
}

<article>
<h1 id="new-command-choco-new">New Command (choco new)</h1>
<p>Chocolatey will generate package specification files for a new package.</p>
<h2 id="usage">Usage</h2>
<pre><code>choco new &lt;name&gt; [&lt;options/switches&gt;] [&lt;property=value&gt; &lt;propertyN=valueN&gt;]</code></pre>
<p>Possible properties to pass:<br />
packageversion<br />
maintainername<br />
maintainerrepo<br />
installertype<br />
url<br />
url64<br />
silentargs</p>
<p><strong>NOTE:</strong> Starting in 0.9.10, you can pass arbitrary property value pairs<br />
through to templates. This really unlocks your ability to create<br />
packages automatically!</p>
<p><strong>NOTE:</strong> <a href="https://bit.ly/choco_pro_business">Chocolatey for Business</a> can create complete packages by just<br />
pointing the new command to native installers!</p>
<h2 id="examples">Examples</h2>
<pre><code>choco new bob
choco new bob -a --version 1.2.0 maintainername=&quot;&#39;This guy&#39;&quot;
choco new bob silentargs=&quot;&#39;/S&#39;&quot; url=&quot;&#39;https://somewhere/out/there.msi&#39;&quot;
choco new bob --outputdirectory Packages</code></pre>
<h2 id="options-and-switches">Options and Switches</h2>
<p><strong>NOTE:</strong> Options and switches apply to all items passed, so if you are<br />
running a command like install that allows installing multiple<br />
packages, and you use <code>--version=1.0.0</code>, it is going to look for and<br />
try to install version 1.0.0 of every package passed. So please split<br />
out multiple package calls when wanting to pass specific options.</p>
<p>Includes <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-reference" })#default-options-and-switches">default options/switches</a> (included below for completeness).</p>
<pre><code>
 -?, --help, -h
     Prints out the help menu.

 -d, --debug
     Debug - Run in Debug Mode.

 -v, --verbose
     Verbose - See verbose messaging.

     --acceptlicense, --accept-license
     AcceptLicense - Accept license dialogs automatically.

 -y, --yes, --confirm
     Confirm all prompts - Chooses affirmative answer instead of prompting. 
       Implies --accept-license

 -f, --force
     Force - force the behavior

     --noop, --whatif, --what-if
     NoOp - Don&#39;t actually do anything.

 -r, --limitoutput, --limit-output
     LimitOutput - Limit the output to essential information

     --execution-timeout=VALUE
     CommandExecutionTimeoutSeconds - Override the default execution timeout 
       in the configuration of 2700 seconds.

 -c, --cache, --cachelocation, --cache-location=VALUE
     CacheLocation - Location for download cache, defaults to %TEMP% or value 
       in chocolatey.config file.

     --allowunofficial, --allow-unofficial, --allowunofficialbuild, --allow-unofficial-build
     AllowUnofficialBuild - When not using the official build you must set 
       this flag for choco to continue.

     --failstderr, --failonstderr, --fail-on-stderr, --fail-on-standard-error, --fail-on-error-output
     FailOnStandardError - Fail on standard error output (stderr), typically 
       received when running external commands during install providers. This 
       overrides the feature failOnStandardError.

     --use-system-powershell
     UseSystemPowerShell - Execute PowerShell using an external process 
       instead of the built-in PowerShell host. Available in 0.9.10+.

 -a, --auto, --automaticpackage
     AutomaticPackage - Generate automatic package instead of normal. 
       Defaults to false

 -t, --template, --template-name=VALUE
     TemplateName - Use a named template in 
       C:\ProgramData\chocolatey\templates\templatename instead of built-in 
       template. Available in 0.9.9.9+. Manage templates as packages in 0.9.10+.

     --name=VALUE
     Name [Required]- the name of the package. Can be passed as first 
       parameter without &quot;--name=&quot;.

     --version=VALUE
     Version - the version of the package. Can also be passed as the property 
       PackageVersion=somevalue

     --maintainer=VALUE
     Maintainer - the name of the maintainer. Can also be passed as the 
       property MaintainerName=somevalue

     --outputdirectory=VALUE
     OutputDirectory - Specifies the directory for the created Chocolatey 
       package file. If not specified, uses the current directory. Available in 
       0.9.10+.
</code></pre>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-reference" })">Command Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>choco new -h</code>.</p>
</article>
