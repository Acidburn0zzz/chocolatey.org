@{
  ViewBag.Title = "HelpersReference";
}

<article>
<h1 id="powershell-functions-aka-helpers-reference">PowerShell Functions aka Helpers Reference</h1>
<!-- This documentation file is automatically generated from the files at $sourceFunctions using $($sourceLocation)GenerateDocs.ps1. Contributions are welcome at the original location(s). -->
<!-- TOC -->
<ul>
<li><a href="#summary">Summary</a></li>
<li><a href="#main-functions">Main Functions</a></li>
<li><a href="#error--success-functions">Error / Success Functions</a></li>
<li><a href="#more-functions">More Functions</a>
<ul>
<li><a href="#administrative-access-functions">Administrative Access Functions</a></li>
<li><a href="#non-administrator-safe-functions">Non-Administrator Safe Functions</a></li>
</ul></li>
<li><a href="#complete-list-alphabetical-order">Complete List (alphabetical order)</a></li>
<li><a href="#chocolatey-for-business-functions">Chocolatey for Business Functions</a></li>
<li><a href="#variables">Variables</a>
<ul>
<li><a href="#environment-variables">Environment Variables</a>
<ul>
<li><a href="#advanced-environment-variables">Advanced Environment Variables</a></li>
<li><a href="#set-by-options-and-configuration">Set By Options and Configuration</a></li>
<li><a href="#business-edition-variables">Business Edition Variables</a></li>
<li><a href="#experimental-environment-variables">Experimental Environment Variables</a></li>
<li><a href="#not-useful-or-anti-pattern-if-used">Not Useful Or Anti-Pattern If Used</a></li>
</ul></li>
</ul></li>
</ul>
<!-- /TOC -->
<h2 id="summary">Summary</h2>
<p>In your Chocolatey packaging, you have the ability to use these functions (and others with Chocolatey&#39;s <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "how-to-create-extensions" })">PowerShell Extensions</a>) to work with all aspects of software management. Keep in mind Chocolatey&#39;s automation scripts are just PowerShell, so you can do manage anything you want.</p>
<p><strong>NOTE</strong>: These scripts are for package scripts, not for use directly in PowerShell. This is in the create packages section, not the using Chocolatey section.</p>
<h2 id="main-functions">Main Functions</h2>
<p>These functions call other functions and many times may be the only thing you need in your <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "chocolatey-install-ps1" })">chocolateyInstall.ps1 file</a>.</p>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-package" })">Install-ChocolateyPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-zip-package" })">Install-ChocolateyZipPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-powershell-command" })">Install-ChocolateyPowershellCommand</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-vsix-package" })">Install-ChocolateyVsixPackage</a></li>
</ul>
<h2 id="error-success-functions">Error / Success Functions</h2>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-chocolatey-success" })">Write-ChocolateySuccess</a> - <strong>DEPRECATED</strong></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-chocolatey-failure" })">Write-ChocolateyFailure</a> - <strong>DEPRECATED</strong></li>
</ul>
<p>You really don&#39;t need a try catch with Chocolatey PowerShell files anymore.</p>
<h2 id="more-functions">More Functions</h2>
<h3 id="administrative-access-functions">Administrative Access Functions</h3>
<p>When creating packages that need to run one of the following commands below, one should add the tag <code>admin</code> to the nuspec.</p>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-package" })">Install-ChocolateyPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-start-chocolatey-process-as-admin" })">Start-ChocolateyProcessAsAdmin</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-install-package" })">Install-ChocolateyInstallPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-path" })">Install-ChocolateyPath</a> - when specifying machine path</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-environment-variable" })">Install-ChocolateyEnvironmentVariable</a> - when specifying machine path</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-explorer-menu-item" })">Install-ChocolateyExplorerMenuItem</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-file-association" })">Install-ChocolateyFileAssociation</a></li>
</ul>
<h3 id="non-administrator-safe-functions">Non-Administrator Safe Functions</h3>
<p>When you have a need to run Chocolatey without Administrative access required (non-default install location), you can run the following functions without administrative access.</p>
<p>These are the functions from above as one list.</p>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-zip-package" })">Install-ChocolateyZipPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-powershell-command" })">Install-ChocolateyPowershellCommand</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-chocolatey-success" })">Write-ChocolateySuccess</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-chocolatey-failure" })">Write-ChocolateyFailure</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-chocolatey-web-file" })">Get-ChocolateyWebFile</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-chocolatey-unzip" })">Get-ChocolateyUnzip</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-path" })">Install-ChocolateyPath</a> - when specifying user path</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-environment-variable" })">Install-ChocolateyEnvironmentVariable</a> - when specifying user path</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-desktop-link" })">Install-ChocolateyDesktopLink</a> - <strong>DEPRECATED</strong> - see <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-shortcut" })">Install-ChocolateyShortcut</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-pinned-task-bar-item" })">Install-ChocolateyPinnedTaskBarItem</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-shortcut" })">Install-ChocolateyShortcut</a> - v0.9.9+</li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-update-session-environment" })">Update-SessionEnvironment</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-package-parameters" })">Get-PackageParameters</a> - v0.10.8+</li>
</ul>
<h2 id="complete-list-alphabetical-order">Complete List (alphabetical order)</h2>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-format-file-size" })">Format-FileSize</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-checksum-valid" })">Get-ChecksumValid</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-chocolatey-unzip" })">Get-ChocolateyUnzip</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-chocolatey-web-file" })">Get-ChocolateyWebFile</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-environment-variable" })">Get-EnvironmentVariable</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-environment-variable-names" })">Get-EnvironmentVariableNames</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-ftp-file" })">Get-FtpFile</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-o-s-architecture-width" })">Get-OSArchitectureWidth</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-package-parameters" })">Get-PackageParameters</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-tools-location" })">Get-ToolsLocation</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-u-a-c-enabled" })">Get-UACEnabled</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-uninstall-registry-key" })">Get-UninstallRegistryKey</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-virus-check-valid" })">Get-VirusCheckValid</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-web-file" })">Get-WebFile</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-web-file-name" })">Get-WebFileName</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-get-web-headers" })">Get-WebHeaders</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-bin-file" })">Install-BinFile</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-desktop-link" })">Install-ChocolateyDesktopLink</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-environment-variable" })">Install-ChocolateyEnvironmentVariable</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-explorer-menu-item" })">Install-ChocolateyExplorerMenuItem</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-file-association" })">Install-ChocolateyFileAssociation</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-install-package" })">Install-ChocolateyInstallPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-package" })">Install-ChocolateyPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-path" })">Install-ChocolateyPath</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-pinned-task-bar-item" })">Install-ChocolateyPinnedTaskBarItem</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-powershell-command" })">Install-ChocolateyPowershellCommand</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-shortcut" })">Install-ChocolateyShortcut</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-vsix-package" })">Install-ChocolateyVsixPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-zip-package" })">Install-ChocolateyZipPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-vsix" })">Install-Vsix</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-set-environment-variable" })">Set-EnvironmentVariable</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-set-power-shell-exit-code" })">Set-PowerShellExitCode</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-start-chocolatey-process-as-admin" })">Start-ChocolateyProcessAsAdmin</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-test-process-admin-rights" })">Test-ProcessAdminRights</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-bin-file" })">Uninstall-BinFile</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-chocolatey-environment-variable" })">Uninstall-ChocolateyEnvironmentVariable</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-chocolatey-package" })">Uninstall-ChocolateyPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-chocolatey-zip-package" })">Uninstall-ChocolateyZipPackage</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-update-session-environment" })">Update-SessionEnvironment</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-chocolatey-failure" })">Write-ChocolateyFailure</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-chocolatey-success" })">Write-ChocolateySuccess</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-file-update-log" })">Write-FileUpdateLog</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-write-function-call-log-message" })">Write-FunctionCallLogMessage</a></li>
</ul>
<h2 id="chocolatey-for-business-functions">Chocolatey for Business Functions</h2>
<ul>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-install-chocolatey-windows-service" })">Install-ChocolateyWindowsService</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-start-chocolatey-windows-service" })">Start-ChocolateyWindowsService</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-stop-chocolatey-windows-service" })">Stop-ChocolateyWindowsService</a></li>
<li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-uninstall-chocolatey-windows-service" })">Uninstall-ChocolateyWindowsService</a></li>
</ul>
<h2 id="variables">Variables</h2>
<p>There are also a number of environment variables providing access to some values from the nuspec and other information that may be useful. They are accessed via <code>$env:variableName</code>.</p>
<h3 id="environment-variables">Environment Variables</h3>
<p>Chocolatey makes a number of environment variables available (You can access any of these with $env:TheVariableNameBelow):</p>
<ul>
<li>TEMP/TMP - Overridden to the CacheLocation, but may be the same as the original TEMP folder</li>
<li>ChocolateyInstall - Top level folder where Chocolatey is installed</li>
<li>ChocolateyPackageName - The name of the package, equivalent to the <code>&lt;id /&gt;</code> field in the nuspec (0.9.9+)</li>
<li>ChocolateyPackageTitle - The title of the package, equivalent to the <code>&lt;title /&gt;</code> field in the nuspec (0.10.1+)</li>
<li>ChocolateyPackageVersion - The version of the package, equivalent to the <code>&lt;version /&gt;</code> field in the nuspec (0.9.9+)</li>
<li>ChocolateyPackageFolder - The top level location of the package folder - the folder where Chocolatey has downloaded and extracted the NuGet package, typically <code>C:\ProgramData\chocolatey\lib\packageName</code>.</li>
</ul>
<h4 id="advanced-environment-variables">Advanced Environment Variables</h4>
<p>The following are more advanced settings:</p>
<ul>
<li>ChocolateyPackageParameters - Parameters to use with packaging, not the same as install arguments (which are passed directly to the native installer). Based on <code>--package-parameters</code>. (0.9.8.22+)</li>
<li>CHOCOLATEY_VERSION - The version of Choco you normally see. Use if you are &#39;lighting&#39; things up based on choco version. (0.9.9+) - Otherwise take a dependency on the specific version you need.</li>
<li>ChocolateyForceX86 = If available and set to &#39;true&#39;, then user has requested 32bit version. (0.9.9+) - Automatically handled in built in Choco functions.</li>
<li>OS_PLATFORM - Like Windows, OSX, Linux. (0.9.9+)</li>
<li>OS_VERSION - The version of OS, like 6.1 something something for Windows. (0.9.9+)</li>
<li>OS_NAME - The reported name of the OS. (0.9.9+)</li>
<li>IS_PROCESSELEVATED = Is the process elevated? (0.9.9+)</li>
<li>ChocolateyToolsLocation - formerly &#39;ChocolateyBinRoot&#39; (&#39;ChocolateyBinRoot&#39; will be removed with Chocolatey v2.0.0), this is where tools being installed outside of Chocolatey packaging will go. (0.9.10+)</li>
</ul>
<h4 id="set-by-options-and-configuration">Set By Options and Configuration</h4>
<p>Some environment variables are set based on options that are passed, configuration and/or features that are turned on:</p>
<ul>
<li>ChocolateyEnvironmentDebug - Was <code>--debug</code> passed? If using the built-in PowerShell host, this is always true (but only logs debug messages to console if <code>--debug</code> was passed) (0.9.10+)</li>
<li>ChocolateyEnvironmentVerbose - Was <code>--verbose</code> passed? If using the built-in PowerShell host, this is always true (but only logs verbose messages to console if <code>--verbose</code> was passed). (0.9.10+)</li>
<li>ChocolateyForce - Was <code>--force</code> passed? (0.9.10+)</li>
<li>ChocolateyForceX86 - Was <code>-x86</code> passed? (CHECK)</li>
<li>ChocolateyRequestTimeout - How long before a web request will time out. Set by config <code>webRequestTimeoutSeconds</code> (CHECK)</li>
<li>ChocolateyResponseTimeout - How long to wait for a download to complete? Set by config <code>commandExecutionTimeoutSeconds</code> (CHECK)</li>
<li>ChocolateyPowerShellHost - Are we using the built-in PowerShell host? Set by <code>--use-system-powershell</code> or the feature <code>powershellHost</code> (0.9.10+)</li>
</ul>
<h4 id="business-edition-variables">Business Edition Variables</h4>
<ul>
<li>ChocolateyInstallArgumentsSensitive - Encrypted arguments passed from command line <code>--install-arguments-sensitive</code> that are not logged anywhere. (0.10.1+ and licensed editions 1.6.0+)</li>
<li>ChocolateyPackageParametersSensitive - Package parameters passed from command line <code>--package-parameters-senstivite</code> that are not logged anywhere. (0.10.1+ and licensed editions 1.6.0+)</li>
<li>ChocolateyLicensedVersion - What version is the licensed edition on?</li>
<li>ChocolateyLicenseType - What edition / type of the licensed edition is installed?</li>
</ul>
<h4 id="experimental-environment-variables">Experimental Environment Variables</h4>
<p>The following are experimental or use not recommended:</p>
<ul>
<li>OS_IS64BIT = This may not return correctly - it may depend on the process the app is running under (0.9.9+)</li>
<li>CHOCOLATEY_VERSION_PRODUCT = the version of Choco that may match CHOCOLATEY_VERSION but may be different (0.9.9+) - based on git describe</li>
<li>IS_ADMIN = Is the user an administrator? But doesn&#39;t tell you if the process is elevated. (0.9.9+)</li>
</ul>
<h4 id="not-useful-or-anti-pattern-if-used">Not Useful Or Anti-Pattern If Used</h4>
<ul>
<li>ChocolateyInstallOverride = Not for use in package automation scripts. Based on <code>--override-arguments</code> being passed. (0.9.9+)</li>
<li>ChocolateyInstallArguments = The installer arguments meant for the native installer. You should use chocolateyPackageParameters instead. Based on <code>--install-arguments</code> being passed. (0.9.9+)</li>
<li>ChocolateyIgnoreChecksums - Was <code>--ignore-checksums</code> passed or the feature <code>checksumFiles</code> turned off? (0.9.9.9+)</li>
<li>ChocolateyAllowEmptyChecksums - Was <code>--allow-empty-checksums</code> passed or the feature <code>allowEmptyChecksums</code> turned on? (0.10.0+)</li>
<li>ChocolateyAllowEmptyChecksumsSecure - Was <code>--allow-empty-checksums-secure</code> passed or the feature <code>allowEmptyChecksumsSecure</code> turned on? (0.10.0+)</li>
<li>ChocolateyCheckLastExitCode - Should Chocolatey check LASTEXITCODE? Is the feature <code>scriptsCheckLastExitCode</code> turned on? (0.10.3+)</li>
<li>ChocolateyChecksum32 - Was <code>--download-checksum</code> passed? (0.10.0+)</li>
<li>ChocolateyChecksumType32 - Was <code>--download-checksum-type</code> passed? (0.10.0+)</li>
<li>ChocolateyChecksum64 - Was <code>--download-checksum-x64</code> passed? (0.10.0)+</li>
<li>ChocolateyChecksumType64 - Was <code>--download-checksum-type-x64</code> passed? (0.10.0)+</li>
<li>ChocolateyPackageExitCode - The exit code of the script that just ran - usually set by <code>Set-PowerShellExitCode</code> (CHECK)</li>
<li>ChocolateyLastPathUpdate - Set by Chocolatey as part of install, but not used for anything in particular in packaging.</li>
<li>ChocolateyProxyLocation - The explicit proxy location as set in the configuration <code>proxy</code> (0.9.9.9+)</li>
<li>ChocolateyDownloadCache - Use available download cache? Set by <code>--skip-download-cache</code>, <code>--use-download-cache</code>, or feature <code>downloadCache</code> (0.9.10+ and licensed editions 1.1.0+)</li>
<li>ChocolateyProxyBypassList - Explicitly set locations to ignore in configuration <code>proxyBypassList</code> (0.10.4+)</li>
<li>ChocolateyProxyBypassOnLocal - Should the proxy bypass on local connections? Set based on configuration <code>proxyBypassOnLocal</code> (0.10.4+)</li>
<li>http_proxy - Set by original <code>http_proxy</code> passthrough, or same as <code>ChocolateyProxyLocation</code> if explicitly set. (0.10.4+)</li>
<li>https_proxy - Set by original <code>https_proxy</code> passthrough, or same as <code>ChocolateyProxyLocation</code> if explicitly set. (0.10.4+)</li>
<li>no_proxy- Set by original <code>no_proxy</code> passthrough, or same as <code>ChocolateyProxyBypassList</code> if explicitly set. (0.10.4+)</li>
</ul>
</article>
