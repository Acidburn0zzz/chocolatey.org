@{
  ViewBag.Title = "HelpersInstallChocolateyWindowsService";
}

<article>
<h1 id="install-chocolateywindowsservice">Install-ChocolateyWindowsService</h1>
<p><strong>NOTE</strong>: This function requires a Chocolatey for Business License to use.</p>
<p>Installs a Windows Service using Install Util, plus some extra awesome-sauce.</p>
<h2 id="syntax">Syntax</h2>
<pre><code class="powershell">Install-ChocolateyWindowsService `
  -Name &lt;string&gt; `
  -ServiceExecutablePath &lt;string&gt; `
  [-Username &lt;string&gt;] `
  [-Password &lt;string&gt;] `
  [-DisplayName &lt;string&gt;] `
  [-Description &lt;string&gt;] `
  [-StartupType &lt;ChocolateyWindowsServiceStartupType&gt; {Unknown | Manual | Automatic | Disabled}] `
  [-DoNotStartService] `
  [-DoNotReinstallService] `
  [&lt;CommonParameters&gt;]</code></pre>
<h2 id="description">Description</h2>
<p>This installs a Windows Service onto a machine. When provided a user name, this<br />
will ensure that user exists, is in the Administrators group, and has all of the<br />
correct privileges to run as a service. For more details on the privileges, see<br />
the Username parameter below.</p>
<p>If a user is not a built in user and no password is provided, Chocolatey will<br />
manage the password, which will be different for every machine and user and very<br />
complex. For more details on the password, see the Password parameter below.</p>
<p>One of the additional advanced features of this function is being able to<br />
upgrade a service without shutting it down first - Chocolatey will move the<br />
current running service and put in all of the new binaries. It will require a<br />
restart of the service to move to the new code, but you can upgrade a service in<br />
place without shutting it down first (one time). To use this, you must supply<br />
the DoNotReinstallService switch. See the parameter below for more details.</p>
<h2 id="notes">Notes</h2>
<p>Requires Chocolatey for Business.</p>
<h2 id="aliases">Aliases</h2>
<p>None</p>
<h2 id="examples">Examples</h2>
<p><strong>EXAMPLE 1</strong></p>
<pre><code class="powershell">Install-ChocolateyWindowsService -Name &#39;bob&#39; -ServiceExecutablePath &#39;c:\somewhere\to\service.exe&#39;</code></pre>
<p><strong>EXAMPLE 2</strong></p>
<pre><code class="powershell">$toolsDir   = &quot;$(Split-Path -parent $MyInvocation.MyCommand.Definition)&quot;
$serviceExe = Join-Path $toolsDir &#39;service\dan-agent.exe&#39;

$packageArgs = @@{
  Name                  = &#39;dan&#39;
  DisplayName           = &#39;Dan Agent&#39;
  ServiceExecutablePath = $serviceExe
  Username              = &#39;DanTheBuilder&#39;
}

Install-ChocolateyWindowsService @@packageArgs</code></pre>
<p><strong>EXAMPLE 3</strong><br />
This is the installation code for the Chocolatey Agent service itself.</p>
<pre><code class="powershell">$toolsDir   = &quot;$(Split-Path -parent $MyInvocation.MyCommand.Definition)&quot;
$serviceExe = Join-Path $toolsDir &#39;service\chocolatey-agent.exe&#39;

$packageArgs = @@{
  Name                  = &#39;chocolatey-agent&#39;
  DisplayName           = &#39;Chocolatey Agent&#39;
  Description           = &#39;Chocolatey Agent is a backgound service for Chocolatey.&#39;
  StartupType           = &#39;Automatic&#39;
  ServiceExecutablePath = $serviceExe
  Username              = &#39;ChocolateyLocalAdmin&#39;
}

$pp = Get-PackageParameters
if ($pp[&#39;Username&#39;]) { $packageArgs[&#39;Username&#39;] = $pp[&#39;Username&#39;] }
if ($pp[&#39;Password&#39;]) { $packageArgs[&#39;Password&#39;] = $pp[&#39;Password&#39;] }
if ($pp[&#39;EnterPassword&#39;]) { $packageArgs[&#39;Password&#39;] = Read-Host &quot;Enter password for $($packageArgs[&#39;Username&#39;]):&quot; -AsSecureString}
if ($pp[&#39;UseDefaultChocolateyConfigUser&#39;]) { $packageArgs.Remove(&#39;Username&#39;) }

# We don&#39;t want to shut down the service when we are running in background mode
if ($env:ChocolateyBackgroundService -eq &#39;true&#39;) {
  Write-Warning &quot;Detected running in background mode to upgrade the chocolatey-agent. Upgrade will attempt without restarting the service. \n Changes to service itself (like user/password) will be ignored.&quot;
  $packageArgs[&#39;DoNotReinstallService&#39;] = $true
}

# Explicit request not to restart or reinstall the service.
if ($pp[&#39;NoRestartService&#39;] -or $pp[&#39;DoNotReinstallService&#39;]) {
  Write-Warning &quot;Upgrade will attempt without restarting the service. \n Changes to service itself (like user/password) will be ignored.&quot;
  $packageArgs[&#39;DoNotReinstallService&#39;] = $true
}

Install-ChocolateyWindowsService @@packageArgs</code></pre>
<h2 id="inputs">Inputs</h2>
<p>None</p>
<h2 id="outputs">Outputs</h2>
<p>None</p>
<h2 id="parameters">Parameters</h2>
<h3 id="description-string">-Description [&lt;string&gt;]</h3>
<p>The description of the service.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>Named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="displayname-string">-DisplayName [&lt;string&gt;]</h3>
<p>The display name of the service.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>Named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="donotreinstallservice">-DoNotReinstallService</h3>
<p>Do not uninstall/restart service. This is for advanced scenarios when you need<br />
to deploy a newer version of a service and control when the restart happens over<br />
to the newly deployed code.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>Named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="donotstartservice">-DoNotStartService</h3>
<p>Do not start service after install. This keeps the service from starting up when<br />
installing/upgrading.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>Named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="name-string">-Name &lt;string&gt;</h3>
<p>The name of the service to install.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>0</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="password-string">-Password [&lt;string&gt;]</h3>
<p>The password for the service - defaults to empty. If the user is not a built-in<br />
account like LocalSystem and the user name is provided without a password being<br />
provided, the password will automatically be a Chocolatey Managed Password.</p>
<p>When Chocolatey manages the password for an account, it creates a very complex<br />
password:</p>
<ul>
<li>32 characters long</li>
<li>Uppercase, lowercase, numbers, and symbols to meet very stringent complexity<br />
requirements</li>
<li>Different for every machine</li>
<li>Completely unguessable</li>
</ul>
<p>No one at Chocolatey Software could even tell you what the password is for a<br />
particular machine without local access.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>Named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="serviceexecutablepath-string">-ServiceExecutablePath &lt;string&gt;</h3>
<p>The full path (absolute path) to the service executable file.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>true</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>1</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="startuptype-chocolateywindowsservicestartuptype">-StartupType [&lt;ChocolateyWindowsServiceStartupType&gt;]</h3>
<p>The startup type of the service. Defaults to Automatic.</p>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td></td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>Named</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<h3 id="username-string">-Username [&lt;string&gt;]</h3>
<p>The username for the service - defaults to LocalSystem (SYSTEM). If the user<br />
does not exist, the user will be created. When a user is specified for a<br />
service, the following things will also occur as part of this function:</p>
<ul>
<li>User added to Administrators group</li>
<li>User given privilege/right to run as a service (SeServiceLogonRight)</li>
<li>User given privilege/right to log on as a batch (SeBatchLogonRight)</li>
<li>User given privilege/right to log on interactively (SeInteractiveLogonRight)</li>
<li>User given privilege/right to log on network (SeNetworkLogonRight)</li>
</ul>
<table>
<thead>
<tr class="header">
<th>Property</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Aliases</td>
<td>user</td>
</tr>
<tr class="even">
<td>Required?</td>
<td>false</td>
</tr>
<tr class="odd">
<td>Position?</td>
<td>2</td>
</tr>
<tr class="even">
<td>Default Value</td>
<td></td>
</tr>
<tr class="odd">
<td>Accept Pipeline Input?</td>
<td>true (ByPropertyName)</td>
</tr>
</tbody>
</table>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-reference" })">Function Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from licensed code.</p>
</article>
