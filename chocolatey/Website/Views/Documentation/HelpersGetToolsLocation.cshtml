@{
  ViewBag.Title = "HelpersGetToolsLocation";
}

<article>
<h1 id="get-toolslocation">Get-ToolsLocation</h1>
<p>Gets the top level location for tools/software installed outside of<br />
package folders.</p>
<h2 id="syntax">Syntax</h2>
<pre class="brush: ps">Get-ToolsLocation</pre>
<h2 id="description">Description</h2>
<p>Creates or uses an environment variable that a user can control to<br />
communicate with packages about where they would like software that is<br />
not installed through native installers, but doesn&#39;t make much sense<br />
to be kept in package folders. Most software coming in packages stays<br />
with the package itself, but there are some things that seem to fall<br />
out of this category, like things that have plugins that are installed<br />
into the same directory as the tool. Having that all combined in the<br />
same package directory could get tricky.</p>
<h2 id="notes">Notes</h2>
<p>This is the successor to the poorly named <code>Get-BinRoot</code>. Available as<br />
<code>Get-ToolsLocation</code> in 0.9.10+. If you need compatibility with pre<br />
0.9.10, please use <code>Get-BinRoot</code>.</p>
<p>Sets an environment variable called <code>ChocolateyToolsLocation</code>. If the<br />
older <code>ChocolateyBinRoot</code> is set, it uses the value from that and<br />
removes the older variable.</p>
<h2 id="aliases">Aliases</h2>
<p>Get-BinRoot</code></p>
<h2 id="inputs">Inputs</h2>
<p>None</p>
<h2 id="outputs">Outputs</h2>
<p>None</p>
<h2 id="parameters">Parameters</h2>
<p><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "helpers-reference" })">Function Reference</a></p>
<p><strong><em>NOTE:</em></strong> This documentation has been automatically generated from <code>Import-Module &quot;$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1&quot; -Force; Get-Help Get-ToolsLocation -Full</code>.</p>
</article>
